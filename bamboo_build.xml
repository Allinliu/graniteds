<?xml version="1.0" encoding="UTF-8"?>
<project name="org.granite.builder" default="build.jars" basedir=".">

	<property name="builderVersion" value="3.0.0.M2"/>

	<property name="eclipse.plugins" value="/Applications/eclipse32/plugins"/>
	
	<property name="basews" value="${ws}"/>
	<property name="baseos" value="${os}"/>
	<property name="basearch" value="${arch}"/>
	<property name="basenl" value="${nl}"/>
	<property name="bundleId" value="org.granite.builder"/>
	<property name="bundleVersion" value="${builderVersion}"/>

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="on"/>
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="false"/>
	<property name="logExtension" value=".log"/>
	<property name="compilerArg" value=""/>
	<property name="javacSource" value="1.6"/>
	<property name="javacTarget" value="1.6"/>
	<condition property="dir_bootclasspath" value="${java.home}/../Classes">
		<os family="mac"/>
	</condition>
	<property name="dir_bootclasspath" value="${java.home}/lib"/>
	<path id="path_bootclasspath">
		<fileset dir="${dir_bootclasspath}">
			<include name="*.jar"/>
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath"/>
	<condition property="bundleBootClasspath" value="${JavaSE-1.6}">
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacSource" value="1.6">
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacTarget" value="1.6">
		<isset property="JavaSE-1.6"/>
	</condition>
	<property name="bundleJavacSource" value="${javacSource}"/>
	<property name="bundleJavacTarget" value="${javacTarget}"/>
	<property name="bundleBootClasspath" value="${bootclasspath}"/>

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/org.granite.builder_${builderVersion}">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${basedir}"/>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: org.granite.builder for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<jar destfile="${plugin.destination}/org.granite.builder_${builderVersion}.jar" basedir="${temp.folder}/org.granite.builder_${builderVersion}" filesetmanifest="merge"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="@dot" depends="init" unless="@dot" description="Create jar: org.granite.builder @dot.">
		<delete dir="${temp.folder}/@dot.bin"/>
		<mkdir dir="${temp.folder}/@dot.bin"/>
		<path id="@dot.classpath">
			<fileset dir="${eclipse.plugins}">
				<include name="**/*.jar"/>
				<exclude name="**/org.granite.*/**"/>
			</fileset>
			<fileset dir="lib">
				<include name="*.jar"/>
			</fileset>
		</path>
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/@dot.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}">
			<compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
			<classpath refid="@dot.classpath"/>
			<src path="src/"/>
			<compilerarg value="@${basedir}/bamboo_javaCompiler...args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
			<compilerarg line="-log '${temp.folder}/@dot.bin${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
		</javac>
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}/@dot.bin" failonerror="true" overwrite="false">
			<fileset dir="src/">
				<exclude name="**/*.java"/>
				<exclude name="**/package.htm*"/>
			</fileset>
		</copy>
		<mkdir dir="${build.result.folder}"/>
		<copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
			<fileset dir="${temp.folder}/@dot.bin">
			</fileset>
		</copy>
		
		<ant antfile="prebuild.xml" target="jar">
			<property name="bin.dir" value="${temp.folder}/@dot.bin"/>
		</ant>

		<delete dir="${temp.folder}/@dot.bin"/>
	</target>

	<target name="src.zip" depends="init" unless="src.zip">
		<mkdir dir="${build.result.folder}"/>
		<antcall target="zip.src.zip"/>
	</target>
	<target name="zip.src.zip">
		<zip destfile="${build.result.folder}/src.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</zip>
	</target>
	<target name="copy.src.zip">
		<copy todir="${source.destination.folder}/" failonerror="true" overwrite="true">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</copy>
	</target>

	<target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: org.granite.builder.">
		<available property="@dot" file="${build.result.folder}/@dot"/>
		<antcall target="@dot"/>
	</target>

	<target name="build.sources" depends="init">
		<available property="src.zip" file="${build.result.folder}/src.zip"/>
		<antcall target="src.zip"/>
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.granite.builder_${builderVersion}/bin"/>
		<copy todir="${destination.temp.folder}/org.granite.builder_${builderVersion}/bin" failonerror="true" overwrite="false">
			<fileset dir="${build.result.folder}/@dot">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${destination.temp.folder}/org.granite.builder_${builderVersion}" failonerror="true" overwrite="false">
			<fileset dir="${basedir}">
				<include name="plugin.xml"/>
				<include name="META-INF/"/>
				<!--include name="bin/"/-->
				<include name="LICENSE.txt"/>
				<include name="README.txt"/>
				<include name="lib/"/>
			</fileset>
		</copy>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.granite.builder_${builderVersion}"/>
		<copy file="${build.result.folder}/src.zip" todir="${destination.temp.folder}/org.granite.builder_${builderVersion}" failonerror="false" overwrite="false"/>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}/org.granite.builder_${builderVersion}"/>
		</antcall>
	</target>

	<target name="gather.individual.sources" depends="init">
		<antcall target="copy.src.zip">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
	</target>

	<target name="copy.src.includes" depends="init">
		<copy todir="${source.destination.folder}" failonerror="false" overwrite="false">
			<fileset dir="${basedir}">
				<include name=".classpath"/>
				<include name=".project"/>
				<include name="META-INF/"/>
				<include name="build.properties"/>
				<include name="plugin.xml"/>
				<include name="src/"/>
				<include name=".settings/"/>
				<include name="LICENSE.txt"/>
				<include name="README.txt"/>
				<include name="lib/"/>
				<include name="prebuild.xml"/>
				<include name="BUILD.txt"/>
			</fileset>
		</copy>
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.granite.builder_${builderVersion}"/>
		<copy todir="${destination.temp.folder}/org.granite.builder_${builderVersion}" failonerror="false" overwrite="false">
			<fileset dir="${temp.folder}">
				<include name="@dot.bin${logExtension}"/>
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: org.granite.builder of all the zips, jars and logs created.">
		<delete dir="${build.result.folder}/@dot"/>
		<delete file="${build.result.folder}/src.zip"/>
		<delete>
			<fileset dir="${plugin.destination}">
				<include name="org.granite.builder_*.jar"/>
				<include name="org.granite.builder_*.zip"/>
			</fileset>
		</delete>
		<delete dir="${temp.folder}"/>
		<delete dir="${build.result.folder}/test-classes"/>
        <delete dir="${build.result.folder}/test-reports"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="C:/workspace34/graniteds_builder" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: org.granite.builder.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}"/>
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/org.granite.builder_${builderVersion}.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

    <target name="build.source.jar" unless="eclipse"
            description="build source jars">
        <mkdir dir="build/sources/java"/>
        <jar destfile="build/sources/java/granite-generator-sources.jar">
            <fileset dir="src">
                <include name="org/granite/generator/**"/>
                <exclude name="META-INF/MANIFEST.MF"/>
            </fileset>
        </jar>
    </target>
	
	
    <target name="build.tests" depends="@dot" description="Compile Test sources">
        <mkdir dir="${build.result.folder}/test-classes"/>
        <javac destdir="${build.result.folder}/test-classes" srcdir="test" debug="true" target="1.5" source="1.5">
            <classpath>
                <pathelement path="${build.result.folder}/@dot"/>
                <fileset dir="lib">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${eclipse.plugins}">
                    <include name="**/org.junit_4*/junit.jar"/>
                    <include name="**/org.hamcrest*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>
    
    <target name="tests" depends="build.tests" description="Run Tests">
        <mkdir dir="${build.result.folder}/test-reports"/>
    	
        <junit printsummary="yes" showoutput="false">
            <classpath>
                <pathelement path="${build.result.folder}/@dot"/>
                <pathelement path="${build.result.folder}/test-classes"/>
                <fileset dir="lib">
                    <include name="*.jar"/>
                </fileset>
            	<fileset dir="${eclipse.plugins}">
            		<include name="**/org.junit_4*/junit.jar"/>
            		<include name="**/org.hamcrest*.jar"/>
            	</fileset>
            </classpath>
            
            <formatter type="xml"/>
            
            <batchtest todir="${build.result.folder}/test-reports">
                <fileset dir="test">
                    <include name="**/Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
        
        <antcall target="tests.reports"/>
    </target>
    
    <target name="tests.reports">
        <junitreport todir="test-reports">
            <fileset dir="./test-reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="test-reports"/>
        </junitreport>  
    </target>
</project>
