<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
   
<chapter id="graniteds.usagescenarios">
	<title>Usage Scenarios</title>
	<para>
	The main value of GraniteDS is to provide integration with other frameworks, both client and server side, 
	so there really are lots of different possible combinations of deployment types and usage scenarios. 
	This chapter will describe various options, and common combinations of technologies.
	</para>
	
	<section id="client">
		<title>Client Options</title>
		<para>
		On the client there are two main choices :
		
		<itemizedlist>
			<listitem>
			Use the standard Flex <literal>RemoteObject</literal> API. This is the easiest if you migrate an existing application from BlazeDS/LCDS/whatever AMF provider. 
			Note however that GraniteDS does not support the standard <literal>Consumer</literal> and <literal>Producer</literal> Flex messaging API. 
			It brings its own client implementations of these classes <literal>org.granite.gravity.Consumer</literal> and <literal>org.granite.gravity.Producer</literal> that provide very similar functionality.
			</listitem>
			
			<listitem>
			Use the <emphasis>Tide</emphasis> remoting API with the GraniteDS/Tide server framework integration (supporting Spring, Seam, EJB3 and CDI). 
			It provides the most advanced features and greatly simplifies asynchronous handling and client data management. 
			It should be preferred for new projects or if you want to benefit from all GraniteDS functionalities.
			</listitem>
		</itemizedlist>
		</para>
		
		<para>
		The Tide remoting API is only a part of the Tide client framework (that supports dependency injection, conversation management, ...) 
		so you can also choose between using the complete Tide framework or only Tide remoting mixed with any other Flex framework such as Cairngorm, PureMVC or Parsley. 
		Obviously we recommend using only the Tide framework as it will greatly simplify the overall architecture of your application, 
		but you will still able to use Tide even if higher powers force you using another particular framework.
		</para>
		
		<para>
		Finally it's also possible to use the Tide client framework independently of the GraniteDS AMF provider. 
		We really cannot recommend doing this if your server is Java-based but you can use Tide with AMFPHP, RubyAMF or any other server technology. 
		The Tide framework is comparable in features to Swiz or Parsley but brings its own unique features and concepts (conversation contexts, centralized exception handling, data management...).
		</para>
	</section>
	
	<section id="server">
		<title>Server Options</title>
		<para>
		On the server there are mostly two options :
		
		<itemizedlist>
			<listitem>
			If you use the <literal>RemoteObject</literal> API, just choose the GraniteDS service factory depending on your server framework. 
			This will additionally bring you the GraniteDS support for externalization of lazily loaded JPA entities/collections, and support for scalable messaging though Gravity.
			</listitem>
			<listitem>
			If you use the Tide API, choose the GraniteDS/Tide service factory for your server framework. 
			This will bring the full feature set of Tide data management and further integration with data push through Gravity. 
			The Tide server integration also provides more specific features depending on the server framework, for example complete support for Spring and Seam security or integration with CDI events.
			</listitem>
		</itemizedlist>
		</para>
	</section>
	
	<section id="common">
		<title>Common Technology Stacks</title>
		<para>
		This section describes some classic technology stacks used with Flex applications and GraniteDS. 
		
		</para>
		<formalpara>
			<title>Spring/Hibernate on Tomcat 6+ or Jetty 6+</title>
			<para>
			This is one of the most common use cases and is similar to what can be done with the Spring-BlazeDS integration project. 
			You can furthermore benefit from the extensive support for serialization of Java objects and JPA detached objects, and of NIO/APR asynchronous support of Tomcat 6.0.18+ or Jetty 6 continuations.
			</para>
		</formalpara>

		<formalpara>
			<title>EJB3/Hibernate on JBoss 4/5</title>
			<para>
			This is another common use case and it provides roughly the same features than Spring/JPA. The main difference is that it requires a full EE container supporting EJB 3.
			</para>
		</formalpara>
		
		<formalpara>
			<title>Tide/Spring/Hibernate on Tomcat 6+ or Jetty 6+</title>
			<para>
			This is an extension of the first case, with the additional use of the Tide remoting API on the client. 
			This will enable the most advanced features such as data paging, transparent lazy-loading of collections, real-time data synchronization... 
			Tide also provides advanced client-side support for Spring Security authorization that for example allow to easily hide/disable buttons for unauthorized actions.
			This is currently the most popular technology stack.			
			</para>
		</formalpara>

		<formalpara>
			<title>Tide/EJB3/Hibernate on JBoss 4/5 or Tide/EJB3/EclipseLink on GlassFish v3</title>
			<para>
			It's also similar to the previous case, but using EJB 3 instead of Spring.
			</para>
		</formalpara>

		<formalpara>
			<title>Tide/Seam 2.2/Hibernate on JBoss 4/5</title>
			<para>
			This is the most natural option if you want to connect your Flex application to a Seam 2 backend. 
			Compared to Tide/Spring, it provides an even deeper integration with Seam including support for Seam events, Query, Seam application framework...
			If you are not sure of what stack you should use, we advise that you consider this stack as this is currently the most powerful and easy to use.
			</para>
		</formalpara>
		
		<formalpara>
		    <title>Tide/CDI/JPA2/Java EE 6 on JBoss 6/7 or GlassFish 3</title>
		    <para>
		    Well this is not really a "common" stack but at least it is the latest Java EE 6 standard. If you are on a Java EE 6 compliant application server,
		    it is definitely the best option.
		    </para>
		</formalpara>
	</section>
</chapter>
