<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
   
<chapter id="graniteds.gfx">
	<title>JavaFX Code Generator</title>
    
	<section id="gfx.overview">
	   <title>Overview</title>
	   <para>
	   One of the main interests of using AMF remoting is that is can maintain a strongly typed bindable JavaFX data model in the client application. However that implies that
	   you have to write a specific JavaFX class for each Java class that will be serialized.
	   Writing and maintaining these JavaFX beans is tedious and a source of many errors. 
	   In order to solve this problem and accelerate the development of JavaFX/Java EE applications, GraniteDS comes with an code generator that writes JavaFX beans for all Java beans.
	   </para>
	   
	   <para>
	   Additionally this generator specifically supports the externalization mechanism of GraniteDS and is able to generate corresponding JavaFX classes for externalized
	   Java beans (typically JPA/Hibernate entities) with specific templates. 
       </para> 
      
       <para>
       Finally this generator is able to write typesafe client proxies for exposed remote services. 
       Compared to the <literal>RemoteService</literal> API, this can greatly help development by bringing auto-completion and improved type-safety when using remote services. 
       </para>
       
       <para>
       Gfx may also replicate validation annotations in order to use the client side validation framework (see <link linkend="graniteds.validation">Bean Validation (JSR-303)</link>).
       </para>
       
       <para>
       The generator (named GFX) is implemented as an Ant task. This Ant task is packaged as an Eclipse 3.2+ Ant plugin but may also be used outside of Eclipse for command line Ant calls.
       It can also be used with Maven by means of the <ulink url="http://flexmojos.sonatype.org/">Flexmojos</ulink> Maven plugin. 
       </para>
	</section>
	
	<section id="gfx.classes">
	   <title>Generated JavaFX Classes</title>
	   <para>
	   A common problem with code generators is the potential loss of manual modifications made in generated files. 
	   A generated file must be either generated once and only once, allowing for safe manual modifications, but it will not be able to reflect the modifications 
	   made in its model (JavaBeans), or regenerated each time its model has been changed, thus preventing safe manual modifications.
	   </para>

       <para>        
       Gfx uses the principle of "Base" and customizable inherited classes that let you add methods to generated classes without facing the risk 
       of losing them when a new generation process is executed. For example, here are the two files generated for a given Java entity bean:
       </para>

        <para><literal>Welcome.java</literal></para>
        <programlisting role="JAVA">
package org.test;

import java.io.Serializable;

import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class Welcome implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id @GeneratedValue
    private Integer id;
    
    @Basic
    private String name;

    public Welcome() {
    }

    public Welcome(String name) {
        this.name = name;
    }
    
    public Integer getId() {
        return id;
    }

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}
        </programlisting>
 
        <para><literal>Welcome.java</literal></para>
        <programlisting role="AS3">
<![CDATA[/**
 * Generated by Gas3 v2.3.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package org.test.client;

@JavaFXObject
@RemoteClass("org.test.Welcome")
public class Welcome extends WelcomeBase {
}]]>
        </programlisting>
 
        <para><literal>WelcomeBase.java</literal></para>
        <programlisting role="JAVA">
<![CDATA[/**
 * Generated by Gas3 v2.3.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Welcome.as).
 */

package org.test.client;

@JavaFXObject
public class WelcomeBase implements IExternalizable {
	...
}]]>
        </programlisting>
            
        <para>
        The recommendations for manual editing are explicit in the header comments of each generated classes: while the "Base" class may be regenerated at any time, 
        keeping it sync with its Java model class, the inherited one is only generated when it does not exist and you may safely add custom methods into it.
        </para>
        <para>
        This two files generation principle is used for all generated classes except interface and enum: these classes are generated without any "Base" class 
        and overwritten each time you have modified their Java counterparts.
        </para>
        <warning><para>
        Note: Do not modify manually generated client interface or enum classes !
        </para></warning>

        <para>
        Here are the details for (re)generation conditions:
        </para>
        
        <para>
        Note that for Java classes, relevant timestamp is the last modified time of the .class file, not the .java file.
        
        <informaltable>
            <tgroup cols="2">
                <colspec colnum="1" colwidth="1*" />
                <colspec colnum="2" colwidth="2*" />
                <thead>
                    <row>
                        <entry>Templates</entry>
                        <entry>Conditions for (re)generation</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Dual templates (base + inherited)</entry>
                        <entry>
                        The inherited JavaFX class is generated only once if it does not exist. The JavaFX base one is generated if it does not exist 
                        or if its timestamp (last modified time) is less than the Java class one
                        </entry>
                    </row>
                    <row>
                        <entry>Single template (enums or interfaces)</entry>
                        <entry>
                        Like the base condition above, the JavaFX class is (re)generated if it does not exist or if its timestamp is less than the Java class one
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        </para>
	</section>
	
	<section id="gfx.templates">
	   <title>Java Classes and Corresponding Templates</title>
	   <para>
       Here is the summary of templates used by the generator depending on the kind of Java class it encounters:

       <informaltable>
           <tgroup cols="3">
               <colspec colnum="1" colwidth="3*" />
               <colspec colnum="2" colwidth="1*" />
               <colspec colnum="3" colwidth="1*" />
               <thead>
                   <row>
                       <entry>Type of Java Class</entry>
                       <entry>Template</entry>
                       <entry>Base Template</entry>
                   </row>
               </thead>
               <tbody>
                   <row>
                       <entry>Standard Java beans</entry>
                       <entry>bean.gsp</entry>
                       <entry>beanBase.gsp</entry>
                   </row>
                   <row>
                       <entry>JPA entities: all classes annotated with <literal>@Entity</literal> and <literal>@MappedSuperclass</literal></entry>
                       <entry>entity.gsp</entry>
                       <entry>entityBase.gsp</entry>
                   </row>
                   <row>
                       <entry>Java enums</entry>
                       <entry>enum.gsp</entry>
                       <entry>(none)</entry>
                   </row>
                   <row>
                       <entry>Java interfaces</entry>
                       <entry>interface.gsp</entry>
                       <entry>(none)</entry>
                   </row>
                   <row>
                       <entry>Java services: all classes annotated with <literal>@RemoteDestination</literal></entry>
                       <entry>remote.gsp</entry>
                       <entry>remoteBase.gsp</entry>
                   </row>
                   <row>
                       <entry>Java events (CDI): all classes annotated with <literal>@TideEvent</literal></entry>
                       <entry>bean.gsp</entry>
                       <entry>beanBase.gsp</entry>
                   </row>
               </tbody>
           </tgroup>
       </informaltable>
       </para>
       
       <para>
       Note that all these templates are bundled in the granite-generator.jar archive, in the org.granite.generator.javafx.template
       package and accessible as resources via the class loader.
       </para>
	</section>
	
	<section id="gfx.eclipse">
	   <title>Eclipse Plugin</title>
	   <para>
	   TODO (see doc for Flex plugin).	   
	   </para>
	   <para>
	   JavaFX classes can also be generated with the Gas3 plugin for Flex. 
	   You just need to define a specific configuration to generate JavaFX classes :
	   <itemizedlist>
	   	<listitem><para>Use the <literal>org.granite.generator.javafx.JavaFXGroovyTransformer</literal> transformer class</para></listitem>
	   	<listitem><para>Use the <literal>org.granite.generator.javafx.DefaultJavaFXTypeFactory</literal> type factory class</para></listitem>
	   	<listitem><para>Select the JavaFX templates in the <literal>org/granite/generator/javafx/template</literal> (for example <literal>class:org/granite/generator/template/entity.gsp</literal>)</para></listitem>
	   </itemizedlist>
	   </para>
	</section>
	
	<section id="gfx.ant">
	   <title>Ant Task</title>
	   <formalpara>
	       <title>Installation in Eclipse</title>
	       <para>
           Download <literal>org.granite.builder_***.jar</literal>, and drop it in your Eclipse <literal>plugins</literal> directory 
           (remove any older version and restart Eclipse). The <emphasis>Add GraniteDS Nature</emphasis> option should now be available 
           if you right-click on your Java project and the <literal>gas3</literal> Ant task should be ready to use in your <literal>build.xml</literal> file under Eclipse.
	       </para>
	   </formalpara>
	   
	   <formalpara>
	       <title>Standalone Installation</title>
	       <para>
           Download <literal>org.granite.builder_***.jar</literal> and unzip it somewhere (create a new directory, this jar doesn't contain a root folder).
           Move the <literal>lib</literal> directory somewhere else (say <literal>gas3libs</literal> at the root of you harddrive).
           </para>
           
           <para>
           In your <literal>build.xml</literal>, you must declare the Gfx ant task as follows:
	       </para>
	   </formalpara>
	   
	   <programlisting role="XML">
<![CDATA[<taskdef name="gas3" classname="org.granite.generator.javafx.AntJavaFXTask"/>]]>
	   </programlisting>

        <para>
        To launch a build process with Gfx targets, you should go to your Java source root directory and type something like:
        </para>

       <programlisting>
$ ant -lib /gfxlibs -f build.xml {target}
...
       </programlisting>

        <para>
        Just replace {target} with a valid target name and make sure Ant is correctly set up: set <literal>ANT_HOME</literal> variable 
        and put <literal>&lt;ANT_HOME&gt;/bin</literal> in your <literal>PATH</literal> environment variable.
        </para>

        <formalpara>
            <title>Basic Usage</title>
            <para>
            After installation, you may use the Gas3 Ant task in any target of an Ant build file. 
            A working example of Gas3 usage is available in the <literal>examples/graniteds_ejb3</literal> sample application.
            </para>

            <para>
            For example:
            </para>
        </formalpara>

        <programlisting role="XML">
<![CDATA[<target name="generate.fx">
    <gfx outputdir="java">
        <classpath>
            <pathelement location="classes"/>
        </classpath>
        <fileset dir="classes">
            <include name="com/myapp/entity/**/*.class"/>
        </fileset>
    </gas3>
</target>]]>
        </programlisting>
        
        <para>
        As you can notice, Gfx generates JavaFX beans from Java compiled classes. 
        You may use multiple Ant filesets in order to specify for which JPA classes you want to generate JavaFX beans. 
        The <literal>classpath</literal> node is used for fileset class loading, and you may reference extra jars or classes needed by your beans class loading.
        </para>

        <para>
        The <literal>outputdir</literal> attribute lets you instruct Gfx in which directory JavaFX beans will be generated (e.g., <literal>./java</literal>). 
        This path is relative to your current project directory and Gfx will create subdirectories for packages. 
        JavaFX beans will by default have the same package hierarchy as Java classes, with the same subdirectories as well.
        This may not be very convenient, so it is recommended that you use a package translation definition (see below <link linkend="gfx.ant.packagetranslator">package translators</link>).
        </para>

        <para>
        For each JPA entity (say <literal>com.myapp.entity.MyEntity</literal>), Gfx will generate two JavaFX beans:
        <itemizedlist>
            <listitem><para>
            <literal>org.entity.MyEntityBase.java</literal>: This bean mainly contains fields, getters, setters, and extra methods. 
            This file is generated if it does not exist or if it is outdated.
            </para></listitem>
            <listitem><para>
            <literal>org.entity.MyEntity.java</literal>: This bean inherits from the "Base" one and is only generated if it does not exist.
            </para></listitem>
        </itemizedlist>
        While you should not modify the "Base" file, since your modifications may be lost after another generation process, 
        you may safely add your code to the inherited bean.
        </para>

        <para>
        You can also use Ant <literal>zipfileset</literal>s if you want to generate JavaFX classes from an existing jar. Note that
        the jar must be in the classpath:
        </para>

        <programlisting role="XML">
<![CDATA[<target name="generate.fx">
    <gfx outputdir="java">
        <classpath>
            <pathelement location="lib/myclasses.jar"/>
        </classpath>
        <zipfileset src="lib/myclasses.jar">
            <include name="com/myapp/entity/**/*.class"/>
        </zipfileset>
    </gas3>
</target>]]>
        </programlisting>

        <formalpara id="gfx.ant.packagetranslator">
            <title>Packages Translations</title>
            <para>
            You may tell Gfx to generate client classes with a different package and directory structure than the corresponding Java server classes.
            This is even highly recommended to avoid classpath conflicts or ambiguous autocompletions in the IDE.
            </para>
        </formalpara>
        
        <programlisting role="XML">
<![CDATA[<gfx ...>
    <classpath .../>
    <fileset .../>

    <translator
        java="path.to.my.java.class"
        client="path.to.my.client.class" />
    <translator
        java="path.to.my.java.class.special"
        client="otherpath.to.my.client.class.special" />
  ...
</gfx>]]>
        </programlisting>
        
        <para>
        Gfx uses these translators with a "best match" principle; all Java classes within the <literal>path.to.my.java.class</literal> package, 
        and subpackages as well, will be translated to <literal>path.to.my.client.class</literal>, while <literal>path.to.my.java.class.special</literal> 
        will use a specific translation (<literal>otherpath.to.my.client.class.special</literal>).
        </para>

        <formalpara>
            <title>Groovy Templates</title>
            <para>
            Gfx generation relies on Groovy templates. You may plug your own templates in by using one of the advanced options attributes below. 
            For example, you could add a <literal>entitytemplate="/absolute/path/to/my/groovy/entityTemplate.gsp"</literal> attribute to the <literal>gfx</literal> node.
            You can also specify paths to your custom templates relative to the current Ant project <literal>basedir</literal> directory.
            If you want to see the Groovy code of the default templates, just unpack <literal>granite-generator.jar</literal> 
            in the <literal>lib</literal> directory of the plugin, and look for <literal>org/granite/generator/template/*[Base].gsp</literal> files.
            </para>
        </formalpara>
        
        <formalpara>
            <title>Advanced Options (Gfx XML Attributes)</title>
            <para>
			Here is the complete list of Gfx node attributes:
			
			<itemizedlist>
			     <listitem><para>
                 <literal>outputdir</literal> and <literal>baseoutputdir</literal>: We have already seen the <literal>outputdir</literal> attribute 
                 in basic usage. <literal>baseoutputdir</literal> lets you define a custom output directory for your "Base" generated files.
                 The default is to use the same directory as specified by the <literal>outputdir</literal> attribute.
			     </para></listitem>
                 <listitem><para>
                 <literal>uid</literal>: If you want your JavaFX to implement <literal>Identifiable</literal>, you must tell the generator 
                 the name of the Java field that contains this UID. By default, Gfx will search for a field named <literal>uid</literal>. 
                 You may change this by adding a <literal>uid="myUid"</literal> attribute to the <literal>gfx</literal> node. 
                 If Gfx does not find this <literal>uid</literal>, it will be silently ignored.
                 </para></listitem>
                 <listitem><para>
                 <literal>tide</literal>: Should we use a Tide specific template instead of the standard base template used for entity beans 
                 (<literal>true</literal> or <literal>false</literal>, defaut is <literal>false</literal>). Setting this attribute has no effect 
                 if you use a custom entity base template. See below.
                 </para></listitem>
                 <listitem><para>
                 <literal>entitytemplate</literal> and <literal>entitybasetemplate</literal>: Templates used for classes annotated with 
                 <literal>@Entity</literal> or <literal>@MappedSuperclass</literal>.
                 </para></listitem>
                 <listitem><para>
                 <literal>interfacetemplate</literal>: Template used for Java interfaces.
                 </para></listitem>
                 <listitem><para>
                 <literal>beantemplate</literal> and <literal>beanbasetemplate</literal>: Templates used for other Java classes including <literal>@Embeddable</literal>.
                 </para></listitem>
                 <listitem><para>
                 <literal>enumtemplate</literal>: Template used for <literal>java.lang.Enum</literal> types.
                 </para></listitem>
                 <listitem><para>
                 <literal>remotetemplate</literal> and <literal>remotebasetemplate</literal>: Templates used for server services (EJB3, Spring or Seam services).
                 </para></listitem>
                 <listitem><para>
                 <literal>clienttypefactory</literal>: You can plug your own <literal>org.granite.generator.as3.As3TypeFactory</literal> implementation 
                 in order to add support for custom types. For example, if you have configured a custom Joda time converter, 
                 you may extend Gfx accordingly for this custom type. Just extend the <literal>org.granite.generator.javafx.DefaultJavaFXTypeFactory</literal> class 
                 and return for example <literal>com.myapp.custom.DATE</literal> when you encounter a Joda <literal>DateTime</literal> instance. 
                 See <link linkend="ext.customtypes">Handling custom data types</link> for a detailed example.
                 </para></listitem>
                 <listitem><para>
                 <literal>entityfactory</literal>: Class used to introspect specific entity properties or metadata (default is 
                 <literal>org.granite.generator.as3.DefaultEntityFactory</literal>). 
                 You may also use the built-in <literal>org.granite.generator.as3.BVEntityFactory</literal> in order to replicate bean validation annotations 
                 into your AS3 model <link linkend="graniteds.validation">Bean Validation (JSR-303)</link>.
                 </para></listitem>
                 <listitem><para>
                 <literal>remotedestinationfactory</literal>: Class used to introspect specific service properties or metadata (default 
                 is <literal>org.granite.generator.as3.DefaultRemoteDestinationFactory</literal>).
                 </para></listitem>
                 <listitem><para>
                 <literal>transformer</literal>: Class used to control the generation process (very advanced use). Default for JavaFX is <literal>org.granite.generator.javafx.JavaFXGroovyTransformer</literal>.                 
                 </para></listitem>
			</itemizedlist>
            </para>
            
            <para>
            For example:
            </para>
        </formalpara>

        <programlisting role="XML">
<![CDATA[<target name="generate.fx">
    <gfx
        outputdir="java"
        baseoutputdir="base_java"
        uid="myUidFieldName"
        entitytemplate="/myEntityTemplate.gsp"
        entitybasetemplate="/myEntityBaseTemplate.gsp"
        interfacetemplate="/myInterfaceTemplate.gsp"
        beantemplate="/myBeanTemplate.gsp"
        beanbasetemplate="/myBeanBaseTemplate.gsp"
        enumtemplate="/myEnumTemplate.gsp"
        remotetemplate="/myRemoteTemplate.gsp"
        remotebasetemplate="/myRemoteBaseTemplate.gsp"
        tide="true"
        clienttypefactory="path.to.MyCustomTypeFactory"
        entityfactory="path.to.MyEntityFactory"
        remotedestinationfactory="path.to.MyRDFactory"
        transformer="path.to.MyTransformer"
        externalizelong="true"
        externalizebiginteger="true"
        externalizebigdecimal="true">
        <classpath>
            <pathelement location="classes"/>
        </classpath>
        <fileset dir="classes">
            <include name="test/granite/ejb3/entity/**/*.class"/>
        </fileset>
    </gas3>
</target>]]>
        </programlisting>
        
        <para>
        Note that when using a custom <literal>clienttypefactory</literal>, <literal>entityfactory</literal>, <literal>remotedestinationfactory</literal> 
        or <literal>transformer</literal> attribute, you must configure the classpath in order to make your custom classes available to the Gfx engine; 
        either use the classpath attribute in the <literal>taskdef</literal> declaration or in the <literal>gfx</literal> call.
        </para>
	</section>
	
	<section id="gfx.maven">
	   <title>Maven Plugin (Flexmojos)</title>
	   <para>
	   The Gfx generator is used as the default code generation tool in the Flexmojos plugin. To use it, you need to add the following part to your maven POM : 
	   </para>
	   <programlisting role="XML">
<![CDATA[<build>
    ...
    <pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.sonatype.flexmojos</groupId>
                <artifactId>flexmojos-maven-plugin</artifactId>
                <version>${flexmojos.version}</version>
            </plugin>
        </plugins>
    </pluginManagement>
    
    <plugins>
        <plugin>
            <groupId>org.sonatype.flexmojos</groupId>
            <artifactId>flexmojos-maven-plugin</artifactId>
            <version>${flexmojos.version}</version>
            <extensions>true</extensions>
            <executions>
                <execution>
                    <goals>
                        <goal>generate</goal>
                    </goals>
                    <configuration>
                        <generatorToUse>graniteds23</generatorToUse>
                        <baseOutputDirectory>${project.build.directory}/generated-sources</baseOutputDirectory>
                        <outputDirectory>${basedir}/src/main/java</outputDirectory>
                        <translators>
                         	<translator>com.myapp.server=com.myapp.client</translator>
                        </translators>
                        <extraOptions>
                        	<tide>true</tide>
                            <uid>uid</uid>
							<transformer>org.granite.generator.javafx.JavaFXGroovyTransformer</transformer>
							<as3typefactory>org.granite.generator.javafx.DefaultJavaFXTypeFactory</as3typefactory>
                            <entityFactory>org.granite.generator.as3.BVEntityFactory</entityFactory>
                            <outputEnumToBaseOutputDirectory>false</outputEnumToBaseOutputDirectory>
                        </extraOptions>
                        <includeJavaClasses>
                            <include>${package}.entities.**</include>
                            <include>${package}.services.*Service</include>
                        </includeJavaClasses>
						<templates>
							<base-bean-template>classpath:org/granite/generator/javafx/template/tideBeanBase.gsp</base-bean-template>
							<bean-template>classpath:org/granite/generator/javafx/template/bean.gsp</bean-template>
							<base-entity-template>classpath:org/granite/generator/javafx/template/tideEntityBase.gsp</base-entity-template>
							<entity-template>classpath:org/granite/generator/javafx/template/entity.gsp</entity-template>
							<base-remote-template>classpath:org/granite/generator/javafx/template/tideRemoteBase.gsp</base-remote-template>
							<remote-template>classpath:org/granite/generator/javafx/template/tideRemote.gsp</remote-template>
							<enum-template>classpath:org/granite/generator/javafx/template/enum.gsp</enum-template>
						</templates>
                    </configuration>
                </execution>
            </executions>
            <dependencies>
                <dependency>
                    <groupId>org.hibernate.javax.persistence</groupId>
                    <artifactId>hibernate-jpa-2.0-api</artifactId>
                    <version>1.0.1.Final</version>
                </dependency> 
                <dependency>
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId>
                    <version>1.0.0.GA</version>
                </dependency> 
                <dependency>
                    <groupId>javax.jdo</groupId>
                    <artifactId>jdo2-api</artifactId>
                    <version>2.3-eb</version>
                </dependency>
                <dependency>
                    <groupId>org.codehaus.groovy</groupId>
                    <artifactId>groovy</artifactId>
                    <version>1.6.0</version>
                </dependency> 
                <dependency>
                    <groupId>antlr</groupId>
                    <artifactId>antlr</artifactId>
                    <version>2.7.7</version>
                </dependency>     
                <dependency>
                    <groupId>asm</groupId>
                    <artifactId>asm</artifactId>
                    <version>2.2.3</version>
                </dependency> 
                <dependency>
                    <groupId>com.thoughtworks.xstream</groupId>
                    <artifactId>xstream</artifactId>
                    <version>1.2.2</version>
                </dependency> 
				<dependency>
				  <groupId>org.sonatype.flexmojos</groupId>
				  <artifactId>flexmojos-generator-graniteds-2.3.0</artifactId>
				  <version>${flexmojos.version}</version>
				</dependency>
                <dependency>
                    <groupId>org.graniteds</groupId>
                    <artifactId>granite-core</artifactId>
                    <version>${graniteds.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.graniteds</groupId>
                    <artifactId>granite-generator-share</artifactId>
                    <version>${graniteds.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.graniteds</groupId>
                    <artifactId>granite-generator</artifactId>
                    <version>${graniteds.version}</version>
                </dependency>
            </dependencies>
        </plugin>
        ...
    </plugins>
    ...
</build>]]>
	   </programlisting>
	</section>
	
	<section id="gfx.templatelanguage">
	   	<title>Template Language</title>
	   	<para>
	   	TODO: see documentation for Gas3 ActionScript 3 generator.
		</para>
	</section>
</chapter>
