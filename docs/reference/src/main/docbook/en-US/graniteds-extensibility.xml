<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="graniteds.extensibility">
	<title>Extensibilty</title>
	<para>
	</para>
	
	<section id="extensibility.customtypes">
	   <title>Handling Custom Data Types</title>
	   <para>
	   If you need special type conversion support, like Joda time to regular AS3 Date, you may write a custom converter/reverter.
	   </para>
	   
	   <formalpara>
	       <title>A JodaDateTime2Date converter/reverter:</title>
	       <para>
	       Here is a complete implementation of a Joda DateTime converter/reverter:
	       </para>
	   </formalpara>
	   
	   <programlisting role="JAVA">
<![CDATA[package com.myapp.converters;

import java.lang.reflect.Type;
import java.util.Date;

import org.granite.messaging.amf.io.convert.Converter;
import org.granite.messaging.amf.io.convert.Converters;
import org.granite.messaging.amf.io.convert.Reverter;
import org.granite.util.ClassUtil;

import org.joda.time.DateTime;

public class JodaDateTime2Date extends Converter implements Reverter {

    public JodaDateTime2Date(Converters converters) {
        super(converters);
    }

    // AMF3Deserialization (Converter)...

    @Override
    protected boolean internalCanConvert(Object value, Type targetType) {
        Class<?> targetClass = ClassUtil.classOfType(targetType);
        return (
            targetClass.isAssignableFrom(DateTime.class) &&
            (value == null || value instanceof Date)
        );
    }

    @Override
    protected Object internalConvert(Object value, Type targetType) {
        return (value == null ? null : new DateTime(((Date)value).getTime()));
    }

    // AMF3Serialization (Reverter)...

    public boolean canRevert(Object value) {
        return value instanceof DateTime;
    }

    public Object revert(Object value) {
        return ((DateTime)value).toDate();
    }
}]]>
	   </programlisting>
	   
	   <para>
	   When you send an AS3 Date to the server, either as method parameter or as a bean field value, it is deserialized as <literal>java.util.Date</literal> object 
	   and, if your target type is a <literal>org.joda.time.DateTime</literal> instance, it fails to find a matching method, 
	   since it looks for a <literal>java.util.Date</literal> parameter, or to assign the bean value, issuing a <literal>ClassCastException</literal>.
	   </para>
        
       <para>
        Hence, the first purpose of the <literal>JodaDateTime2Date</literal> converter above is to convert <literal>java.util.Date</literal> 
        to <literal>org.joda.time.DateTime</literal> at deserialization time using <literal>internalCanConvert</literal>/<literal>internalConvert</literal> methods.
        </para>
        
        <para>
        <literal>JodaDateTime2Date</literal> converter also implements the <literal>Reverter</literal> interface because Joda time is not a known type, 
        and it must be converted back, or reverted, to a <literal>java.util.Date</literal> instance before AMF3 serialization 
        using <literal>canRevert</literal>/<literal>revert</literal> methods.
        </para>
        
        <formalpara>
            <title>Plug-in your converter</title>
            <para>
            The converter should be setup in <literal>granite-config.xml</literal>
            </para>
        </formalpara>
        
        <programlisting role="XML">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE granite-config PUBLIC
    "-//Granite Data Services//DTD granite-config internal//EN"
    "http://www.graniteds.org/public/dtd/2.1.0/granite-config.dtd">

<granite-config>
  <converters>
    <converter type="com.myapp.converters.JodaDateTime2Date" />
  </converters>
</granite-config>]]>
        </programlisting>
        
        <formalpara>
            <title>Modifying Gas3 in Order to Generate AS3 Date Fields for Joda Date Type</title>
            <para>
            When generating AS3 beans for your Java beans, Gas3 will not be able to know about this new converter, and it will write Joda DateTime 
            fields with a raw <literal>org.joda.time.DateTime</literal> type:
            </para>
        </formalpara>
        
        <programlisting role="AS3">
import org.joda.time.DateTime;

private var myDate:DateTime = null;
        </programlisting>
        
        <para>
        In order to tell the generator to use simple AS3 <literal>Date</literal> type for Joda date, you have to extend the 
        <literal>org.granite.generator.as3.DefaultAs3TypeFactory</literal> class:
        </para>
        
        <programlisting role="JAVA">
<![CDATA[package com.myapp.converters;

import org.granite.generator.as3.As3Type;
import org.granite.generator.as3.DefaultAs3TypeFactory;

import org.joda.time.DateTime;

public class CustomAs3TypeFactory extends DefaultAs3TypeFactory {

    @Override
    protected As3Type createAs3Type(Class<?> jType) {
        if (DataTime.class.isAssignableFrom(jType))
            return As3Type.DATE;
        return super.createAs3Type(jType);
    }
}]]>    
        </programlisting>

        <para>
        Then, declare this new factory in the Gas3 task (here for example in an Ant build file):
        </para>
        
        <programlisting role="XML">
<![CDATA[<gas3 as3typefactory="com.myapp.converters.CustomAs3TypeFactory" ...>
    ...
    <classpath>
        ...
        <pathelement location="path/to/my/factory"/>
    </classpath>
    ...
</gas3>]]>
        </programlisting>
        
        <para>
        When using the GraniteDS Eclipse Builder, you may declare it in the <emphasis>Options</emphasis> panel 
        and add your class in the <literal>Classpath</literal> panel.
        </para>
	</section>
            
    <section id="extensibility.security">
        <title>Writing a Security Service</title>
        <para>
        GraniteDS implements security based on the following <literal>SecurityService</literal> interface. 
        Note that the term <literal>Service</literal> in <literal>SecurityService</literal> has nothing to do with a true Flex destination, since security services 
        are not exposed to outside calls:
        </para>

        <programlisting role="JAVA">
<![CDATA[package org.granite.messaging.service.security;

import java.util.Map;

public interface SecurityService {

    public void configure(Map<String, String> params);

    public void login(Object credentials) throws SecurityServiceException;

    public Object authorize(AbstractSecurityContext context) throws Exception;

    public void logout() throws SecurityServiceException;
    
    public void handleSecurityException(SecurityServiceException e);
}]]>
           </programlisting>
           
           <para>
           An implementation of this interface must be thread safe, i.e., only one instance of this service is used in the entire web-app 
           and will be called by concurrent threads.
           </para>
   
           <para>
           <itemizedlist>
               <listitem>
               <literal>configure</literal>: This method is called at startup time and gives a chance to pass parameters to the security service.
               </listitem>
               <listitem>
               <literal>login</literal>: This method is called when you call one of the <literal>setCredentials</literal> or <literal>setRemoteCredentials</literal> 
               <literal>RemoteObject</literal>'s method. Note that these method calls do not fire any request by themselves but only pass credentials on 
               the next destination service method call. The <literal>login</literal> method is responsible for creating and exposing a <literal>java.security.Principal</literal> 
               or throwing an appropriate <literal>org.granite.messaging.service.security.SecurityServiceException</literal> if credentials are invalid. 
               Note that credentials are a Base64 string with the common <literal>"username:password"</literal> format.
               </listitem>
               <listitem>
               <literal>authorize</literal>: This method is called upon each and every service method call invocations (<literal>RemoteObject</literal>) 
               or subscribe/publish actions (<literal>Consumer</literal>/<literal>Producer</literal>). When used with <literal>RemoteObject</literal>s, 
               the <literal>authorize</literal> method is responsible for checking security, calling the service method, and returning the corresponding result. 
               When used with <literal>Consumer</literal>s/<literal>Producer</literal>s, it is simply responsible for checking security; 
               no service method invocation, no result. 
               If authorization fails, either because the user is not logged in or because it doesn't have required rights, it must throw an appropriate 
               <literal>org.granite.messaging.service.security.SecurityServiceException</literal>.
               </listitem>
               <listitem>
               <literal>logout</literal>: This method is called when you call the <literal>RemoteObject</literal>'s <literal>logout</literal> method. 
               Note that the <literal>RemoteObject.logout</literal> method fires a remote request by itself.
               </listitem>
               <listitem>
               <literal>handleSecurityException</literal>: This method is called whenever a <literal>SecurityServiceException</literal> is thrown by 
               a login or logout operation. The default implementation of this method in <literal>AbstractSecurityService</literal> is to do nothing, 
               but you may add extra care for these security exceptions if you need so.
               </listitem>
           </itemizedlist>
         </para>
     </section>
	
	<section id="extensibility.servicefactory">
	   <title>Implementing a Service Factory</title>
	   <para>
	   TODO
	   </para>
	</section>
</chapter>
