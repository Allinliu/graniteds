<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
   
<chapter id="graniteds.validation">
	<title>Client-Side Validation API (JSR 303)</title>
	<para>
    The "Bean Validation" <ulink url="http://jcp.org/en/jsr/detail?id=303">specification</ulink> (aka JSR-303) standardizes an annotation-based validation 
    framework for Java. It provides an easy and powerful way of processing bean validations, with a pre-defined set of constraint annotations, allowing to 
    arbitrarily extend the framework with user specific constraints.
    </para>
    <para>
    Flex doesn't provide by itself such a framework. The standard way of processing validation is to use 
    <ulink url="http://livedocs.adobe.com/flex/3/langref/mx/validators/Validator.html"><literal>Validator</literal></ulink> subclasses and to bind a validator to 
    each user input (see <ulink url="http://livedocs.adobe.com/flex/3/html/help.html?content=validators_2.html">Validating data</ulink>). This method is at least 
    time consuming for the developer, source of inconsistencies between the client-side and the server-side validation processes, and source of redundancies 
    in your MXML code.
    </para>
    <para>
    Starting with the release 2.2, GraniteDS introduces an ActionsScript3 implementation of the Bean Validation specification and provides code generation 
    tools integration so that your Java constraint annotations are reproduced in your AS3 beans.
    </para>
    
    <section id="validation.gettingstarted">
        <title>Getting started with the GraniteDS validation framework</title>
        <para>        
        As its Java equivalent, the GraniteDS validation framework provides a set of standard constraints. Here is an overview of these constraints 
        (see <ulink url="http://www.graniteds.org/public/doc/2.2.0/doc/as3/api/org/granite/validation/constraints/package-detail.html">API documentation</ulink> 
        for details):
        
         <informaltable>
             <tgroup cols="2">
                 <colspec colnum="1" colwidth="1*" />
                 <colspec colnum="2" colwidth="3*" />
                 <thead>
                     <row>
                         <entry>Constraint</entry>
                         <entry>Description</entry>
                     </row>
                 </thead>
                 <tbody>
                     <row>
                         <entry><literal>AssertFalse</literal></entry>
                         <entry>The annotated element must be <literal>false</literal></entry>
                     </row>
                     <row>
                         <entry><literal>AssertTrue</literal></entry>
                         <entry>The annotated element must be <literal>true</literal></entry>
                     </row>
                     <row>
                         <entry><literal>DecimalMax</literal></entry>
                         <entry>The annotated element must be a number whose value must be lower or equal to the specified <literal>maximum</literal></entry>
                     </row>
                     <row>
                         <entry><literal>DecimalMin</literal></entry>
                         <entry>The annotated element must be a number whose value must be greater or equal to the specified <literal>minimum</literal></entry>
                     </row>
                     <row>
                         <entry><literal>Digits</literal></entry>
                         <entry>The annotated element must be a number within accepted range</entry>
                     </row>
                     <row>
                         <entry><literal>Future</literal></entry>
                         <entry>The annotated element must be a date in the future</entry>
                     </row>
                     <row>
                         <entry><literal>Max</literal></entry>
                         <entry>The annotated element must be a number whose value must be lower or equal to the specified <literal>maximum</literal></entry>
                     </row>
                     <row>
                         <entry><literal>Min</literal></entry>
                         <entry>The annotated element must be a number whose value must be greater or equal to the specified <literal>minimum</literal></entry>
                     </row>
                     <row>
                         <entry><literal>NotNull</literal></entry>
                         <entry>The annotated element must not be <literal>null</literal></entry>
                     </row>
                     <row>
                         <entry><literal>Null</literal></entry>
                         <entry>The annotated element must be <literal>null</literal></entry>
                     </row>
                     <row>
                         <entry><literal>Past</literal></entry>
                         <entry>The annotated element must be a date in the past</entry>
                     </row>
                     <row>
                         <entry><literal>Pattern</literal></entry>
                         <entry>The annotated String must match the specified regular expression</entry>
                     </row>
                     <row>
                         <entry><literal>Size</literal></entry>
                         <entry>The annotated element size must be between the specified boundaries (included)</entry>
                     </row>
                </tbody>
             </tgroup>
        </informaltable>
        </para>
        <para>
        Each of these contraint annotation may be applied on a bean property, depending on its type and its expected value:
        </para>
        <para>
        Annotated AS3 Bean Properties:
        </para>
        <programlisting role="AS3">
public class MyAnnotatedBean {

    [NotNull] [Size(min="2", max="8")]
    public var name:String;

    private var _description:String;

    [Size(max="255")]
    public function get description():String {
        return _description;
    }
    public function set description(value:String) {
        _description = value;
    }
}
        </programlisting>
        <para>
        In the above code sample, the <literal>name</literal> value must not be <literal>null</literal> and its length must be between 2 and 8 characters, 
        and the <literal>description</literal> value may be <literal>null</literal> or may have a length of maximum 255 characters. Constraint annotations 
        must be placed on public properties, either public variables or public accessors (and they may also be placed on the class itself).
        </para>
        <para>
        In order to validate an instance of the above class, you may use the <literal>ValidatorFactory</literal> class.
        </para>
        <programlisting role="AS3">
import org.granite.validation.ValidatorFactory;
import org.granite.validation.ConstraintViolation;

var bean:MyAnnotatedBean = new MyAnnotatedBean();

var violations:Array = ValidatorFactory.getInstance().validate(bean);
trace((violations[0] as ConstraintViolation).message); // "may not be null"

bean.name = "123456789";
violations = ValidatorFactory.getInstance().validate(bean);
trace((violations[0] as ConstraintViolation).message); // "size must be between 2 and 8"

bean.name = "1234";
violations = ValidatorFactory.getInstance().validate(bean);
trace(violations.length); // none...
        </programlisting>
        <para>
        Validation may be much more complex than the above basic sample. GraniteDS validation framework supports all advanced concepts of the specification, 
        such as groups, group sequences, default group redefinition, traversable resolver, message interpolator, etc. Please refer to the specification and 
        the various tutorials you may find on the Net.
        </para>
        <tip><para>
        Compilation Tip: You must use the compiler option 
        <literal>-keep-as3-metadata+=AssertFalse,AssertTrue,DecimalMax,DecimalMin, Digits,Future,Max,Min,NotNull,Null,Past,Pattern,Size</literal> 
        or the corresponding configuration for your build system (see <link linkend="graniteds.projectsetup">Project Setup</link> for Ant and Maven) 
        in order to tell the Flex compiler to keep the constraint annotations in your compiled code (Flash Builder 4 appears to keep all metadata by default, 
        but the <literal>mxmlc</literal> command line compiler doesn't)! If you write your own constraints, you will also have to tell the compiler about 
        them in the same way.
        </para></tip>
    </section>
    
    <section id="validation.localization">
        <title>Working with error messages and localization</title>
        <para>
        Default error messages for built-in constraints are provided in four languages: english, french, german (as in the javax API distribution) and chinese.
        Depending on the current locales specified in the <literal>ResourceManager.getInstance().localeChain</literal> array, error messages will be localized 
        in one of these languages (defaulted to english if you use other locales).
        </para>
        <para>
        The easiest way to customize error messages is to use the message attribute of the constraint annotation:
        </para>
        <programlisting role="AS3">
public class MyBean {

    [NotNull(message="Name is mandatory"]
    [Size(min="2", message="Name must have a length of at least {min} characters")]
    public var name;

    ...
}
        </programlisting>
        <para>
        As you can see, you may use parameters (the min attribute) in such customized messages. These error messages are much more accurate than the 
        default ones ("may not be null", "size must be between..."), but you must specify them for each constraint and you cannot localize the literals 
        used for multiple languages.
        </para>
        <para>
        In order to add support for different locales, you will have to define variables (eg. <literal>name.notnull</literal> and <literal>name.minsize</literal>) 
        and use the built-in <ulink url="http://livedocs.adobe.com/flex/3/html/help.html?content=l10n_2.html">ResourceBundle</ulink> support offered by Flex:
        </para>
        <programlisting role="AS3">
public class MyBean {

    [NotNull(message="{name.notnull}"]
    [Size(min="2", message="{name.minsize}")]
    public var name;

    ...
}
        </programlisting>
        <para>
        locale/en_US/ValidationMessages.properties
        </para>
        <programlisting>
name.notnull=Name is mandatory
name.minsize=Name must have a length of at least {min} characters
        </programlisting>
        <para>
        locale/fr_FR/ValidationMessages.properties
        </para>
        <programlisting>
name.notnull=Le nom est obligatoire
name.minsize=Le nom doit avoir une taille d'au moins {min} caractères
        </programlisting>
        <para>
        Register your Bundles:
        </para>
        <programlisting role="AS3">
[ResourceBundle("ValidationMessages")]
        </programlisting>
        <para>
        If you compile your Flex application with support for these two locales (see Flex 
        <ulink url="http://livedocs.adobe.com/flex/3/html/help.html?content=l10n_2.html">documentation</ulink>), the error messages will be localized in english 
        or french, depending on the current selected locale, with the values set in your property files. You may also redefine standard messages for a given 
        locale in the same way:
        </para>
        <para>
        locale/en_US/ValidationMessages.properties
        </para>
        <programlisting>
name.notnull=Name is mandatory
name.minsize=Name must have a length of at least {min} characters
javax.validation.constraints.NotNull.message=This value is mandatory
        </programlisting>
        <para>
        With the above bundle, the default error message for the <literal>NotNull</literal> constraint and the locale <literal>en_US</literal> will be 
        redefined to "This value is mandatory" (instead of "may not be null").
        </para>
        <para>
        Adding support for one or more locales other than the default ones will follow the same principle: create a <literal>ValidationMessages.properties</literal> 
        for the new locale, translate all default error messages and add new ones for your customized message keys. Note that the bundle name must always 
        be set to <literal>"ValidationMessages"</literal>.
        </para>
    </section>
    
    <section id="validation.groups">
        <title>Working with groups</title>
        <para>
        As stated by the specification (section 3.4):
        <quote>
		A group defines a subset of constraints. Instead of validating all constraints for a given object graph, only a subset
		is validated. This subset is defined by the the group or groups targeted. Each constraint declaration defines the list
		of groups it belongs to. If no group is explicitly declared, a constraint belongs to the Default group.
        </quote>
        </para>
        <para>
        The GraniteDS validation framework fully supports the concepts of group, group inheritance, group sequence, default group redefinition and 
        implicit grouping. Like in Java, groups are represented by interfaces. For example, suppose that you want to define and use a 
        <literal>path.to.MyGroup</literal> group. You will have to write the interface, to reference it in some of your constraints and to call the 
        <literal>ValidatorFactory.validate</literal> method with one extra parameter:
        </para>
        <programlisting role="AS3">
<![CDATA[package path.to {
    public interface MyGroup {}
}
...

public class MyBean {

    [NotNull]
    [Size(min="2", max="10", goups="path.to.MyGroup")]
    public var name;

    ...
}
...

var bean:MyBean = new MyBean();

// Default group: NotNull fails.
ValidatorFactory.getInstance().validate(bean);

// MyGroup group: no failure.
ValidatorFactory.getInstance().validate(bean, [MyGroup]);

// Default & MyGroup groups: NotNull fails.
ValidatorFactory.getInstance().validate(bean, [Default, MyGroup]);

bean.name = "a";

// Default group: no failure.
ValidatorFactory.validate(bean);

// MyGroup group: Size fails.
ValidatorFactory.getInstance().validate(bean, [MyGroup]);

// Default & MyGroup groups: Size fails.
ValidatorFactory.getInstance().validate(bean, [Default, MyGroup]);]]>
        </programlisting>
        <para>
        You may of course specify mutliple groups in the constraint annotation, for example 
        <literal>[Size(min="2", max="10", goups="path.to.MyGroup, path.to.MyOtherGroup")]</literal>. Because the group interface references in the annotations 
        must be fully qualified, it may be annoying to always specify the complete path to each group interface, and you may use the namespace resolver available 
        in the <literal>ValidatorFactory</literal> instance:
        </para>
        <programlisting role="AS3">
<![CDATA[ValidatorFactory.getInstance().namespaceResolver.registerNamespace("g", "path.to.*");
...

[Size(min="2", max="10", goups="g:MyGroup, g:MyOtherGroup")]
public var name;]]>
        </programlisting>
        <para>
        Note that the <ulink url="http://www.graniteds.org/public/doc/2.2.0/doc/as3/api/org/granite/validation/groups/Default.html"><literal>Default</literal></ulink> 
        group interface is always registered in the default namespace and may be use without any prefix specification: <literal>groups="Default"</literal> 
        is legal and strictly equivalent to <literal>groups="org.granite.validation.groups.Default"</literal> 
        (or even <literal>groups="javax.validation.groups.Default"</literal> - as the <literal>javax</literal> package is handled as an alias 
        of the <literal>granite</literal>'s one).
        </para>
    </section>
    
    <section id="validation.gas3">
        <title>Integration with code generation tools (Gas3)</title>
        <para>
        The Bean Validation specification is primarily intended to be used with Java entity beans. GraniteDS code generation tools replicate your Java model 
        into an ActionScript 3 model and may be configured in order to copy validation annotations. All you have to do is to change the default 
        <literal>org.granite.generator.as3.DefaultEntityFactory</literal> to <literal>org.granite.generator.as3.BVEntityFactory</literal>.
        </para>
        <para>
        With the Eclipse builder, go to the <emphasis>"Options"</emphasis> panel and change the entity factory as shown is the picture below:
        <imagedata align="center" fileref="images/bventityfactory.jpg"/>
        </para>
        <para>
        With the Ant task, use the <literal>entityfactory</literal> attribute as follow in your <literal>build.xml</literal>:
        </para>
        <programlisting role="XML">
<![CDATA[<gas3 entityfactory="org.granite.generator.as3.BVEntityFactory" ...>
    ...
</gas3>]]>
        </programlisting>
        <para>
        Then, provided that you have a Java entity bean like this one:
        </para>
        <programlisting role="JAVA">
<![CDATA[@Entity
public class Person {

    @Id @GeneratedValue
    private Integer id;
    
    @Basic
    @Size(min=1, max=50)
    private String firstname;
    
    @Basic
    @NotNull(message="You must provide a lastname")
    @Size(min=1, max=255)
    private String lastname;

    // getters and setters...
}]]>
        </programlisting>
        <para>
        ... you will get this generated ActionScript3 code:
        </para>
        <programlisting role="AS3">
<![CDATA[[Bindable]
public class PersonBase implements IExternalizable {

    ...

    public function set firstname(value:String):void {
        _firstname = value;
    }
    [Size(min="1", max="50", message="{javax.validation.constraints.Size.message}")]
    public function get firstname():String {
        return _firstname;
    }

    public function set lastname(value:String):void {
        _lastname = value;
    }
    [NotNull(message="You must provide a lastname")]
    [Size(min="1", max="255", message="{javax.validation.constraints.Size.message}")]
    public function get lastname():String {
        return _lastname;
    }

    ....
}]]>
        </programlisting>
        <para>
        You may then use the <literal>ValidationFactory</literal> in order to validate your ActionScript 3 bean, and the same constraints will be applied 
        on the Flex and the Java sides.
        </para>
        <para>
        This works for plain Java beans and entity beans.
        </para>
    </section>
    
    <section id="validation.customconstraints">
        <title>Writing your own Constraints</title>
        <para>
        Suppose you want to make sure that a <literal>Person</literal> bean has at least one of its <literal>firstname</literal> or <literal>lastname</literal> 
        properties <literal>not null</literal>. There is no default constraint that will let you check this. In order to implement a constraint that will 
        do this validation, you will have to write a new <literal>IConstraint</literal> implementation, register it with the <literal>ValidatorFactory</literal> 
        and use the corresponding annotation on top of the <literal>Person</literal> class.
        </para>
        <para>
        PersonChecker.as
        </para>
        <programlisting role="AS3">
<![CDATA[public class PersonChecker extends BaseConstraint {

    override public function initialize(annotation:Annotation, factory:ValidatorFactory):void {
        // initialize the BaseContraint with the default message (a bundle key).
        internalInitialize(factory, annotation, "{personChecker.message}");
    }

    override public function validate(value:*):String {
        // don't validate null Person beans.
        if (Null.isNull(value))
            return null;

        // check value type (use helper class).
        ConstraintHelper.checkValueType(this, value, [Person]);

        // validate the Person bean: at least one of the firstname or lastname property
        // must be not null.
        if (Person(value).firstname == null && Person(value).lastname == null)
            return message;

        // return null if validation is successful.
        return null;
    }
}]]>
        </programlisting>
        <para>        
        The <literal>PersonChecker</literal> class actually extends the <literal>BaseContraint</literal> class that simplifies <literal>IConstraint</literal> 
        implementations. It defines a default message (<literal>"{personChecker.message}"</literal>) with a message key that could be used in your validation 
        messages bundles (see above <link linkend="graniteds.localization">Working with Error Messages and Localization</link>).
        </para>
        <para>
        You should then register this new constraint in the validation framework:
        </para>
        <programlisting role="AS3">
ValidatorFactory.getInstance().registerConstraintClass(PersonChecker);
        </programlisting>
        <para>
        Because Flex annotations have no specific implementation, you may then directly use the constraint annotation in the <literal>Person</literal> class:
        </para>
        <programlisting role="AS3">
[Bindable]
[PersonChecker]
public class Person {

    [Size(min="1", max="50")]
    public var firstname;

    [Size(min="1", max="255")]
    public var lastname;
}
        </programlisting>
        <para>
        Note that the annotation isn't qualified with any package name: registering two constraint class with the same name but in different packages 
        will result in using the last registered one only. This behavior may additionaly be used in order to override default constraint implementations: 
        if you write your own <literal>Size</literal> constraint implementation and register it with the <literal>ValidatorFactory</literal> class, it will 
        be used instead of the built-in one.
        </para>
        <para>
        If the constraint exists in Java and if you use the code generation tools, the unqualified class name of the Java constraint will be generated on top 
        of the <literal>Person</literal> class, just as above.
        </para>
        <tip><para>
        Don't forget the <literal>-keep-as3-metadata+=AssertFalse,...,Size,PersonChecker</literal> compiler option!
        </para></tip>
        <para>
        See standard constraint implementations in the GraniteDS distribution to know more about specific attributes support and other customization options.
        </para>
    </section>
    
    <section id="validation.form">
        <title>Using the FormValidator class</title>
        <para>
        By default, in addition to returning an array of <literal>ConstraintViolations</literal>, the validation framework will dispatch events for 
        each failed constraint, provided that the bean that holds the property is an <literal>IEventDispatcher</literal>. These events are instances of 
        the <literal>ConstraintViolationEvent</literal> class and are dispatched between two <literal>ValidationEvent</literal>s events (start and end).
        </para>
        <para>
        Because ActionScript3 beans annotated with the <literal>[Bindable]</literal> annotation are automatically compiled as <literal>IEventDispatcher</literal> 
        implementations, generated beans (or other bindable beans written manually) will dispatch constraint events. You may then listen validation events 
        dispatched by a bean if you register your event listeners as follow:
        </para>
        <programlisting role="AS3">
private function startValidationHandler(event:ValidationEvent):void {
    // reset all error messages...
}

private function constraintViolationHandler(event:ConstraintViolationEvent):void {
    // display the error message on the corresponding input...
}

private function endValidationHandler(event:ValidationEvent):void {
    // done...
}

...
bean.addEventListener(
    ValidationEvent.START_VALIDATION,
    startValidationHandler, false, 0, true
);
bean.addEventListener(
    ConstraintValidatedEvent.CONSTRAINT_VALIDATED,
    constraintValidatedHandler, false, 0, true
);
bean.addEventListener(
    ValidationEvent.END_VALIDATION,
    andValidationHandler, false, 0, true
);

...
ValidatorFactory.getInstance().validate(bean);
        </programlisting>
        <para>
        It may be however very tedious to add such listeners to all your beans and to write the code for displaying or reseting error messages for all inputs.
        </para>
        <para>
        With the <literal>FormValidator</literal> component, you get an easy way to use implicitly these events: the <literal>FormValidator</literal> performs 
        validation on the fly whenever the user enters data into user inputs and automatically displays error messages when these data are incorrect, 
        based on constraint annotations placed on the bean properties.
        </para>
        <para>
        A sample usage with Flex 4 (using the Person bean introduced above and bidirectional bindings):
        </para>
        <programlisting role="XML">
<![CDATA[<fx:Declarations>
    <v:FormValidator id="fValidator" form="{personForm}" entity="{person}"/>
</fx:Declarations>

<fx:Script>

    [Bindable]
    protected var person:Person = new Person();

    protected function savePerson():void {
        if (fValidator.validateEntity()) {
            // actually save the validated person entity...
        }
    }

    protected function resetPerson():void {
        person = new Person();
    }
</fx:Script>

<mx:Form id="personForm">
    <mx:FormItem label="Firstname">
        <s:TextInput id="iFirstname" text="@{person.firstname}"/>
    </mx:FormItem>
    <mx:FormItem label="Lastname" required="true">
        <s:TextInput id="iLastname" text="@{person.lastname}"/>
    </mx:FormItem>
</mx:Form>
  
<s:Button label="Save" click="savePerson()"/>
<s:Button label="Cancel" click="resetPerson()"/>]]>
        </programlisting>
        <para>
        In the above sample, the <literal>personForm</literal> form uses two bidirectional bindings between the text inputs and the person bean. 
        Each time the user enter some text in an input, the value of the input is copied into the bean and triggers a validation. Error messages are 
        then automatically displayed or cleared depending on the validation result.
        </para>
        <para>
        Note that the binding with the target entity should be direct (e.g. not <literal>entity="{model.entity}"</literal> but <literal>entity="{entity}"</literal>.
        If not possible or too complex, you can specify a property <literal>entityPath</literal> to indicate the validator that it should bind to a deeper
        element in the object graph. 
        </para>
        <programlisting role="XML">
<![CDATA[<fx:Declarations>
    <v:FormValidator id="fValidator" form="{personForm}" entity="{model.person}" entityPath="model"/>
</fx:Declarations>
]]>
		</programlisting>        
        <para>
        The global validation of the person bean will be performed when the user click on the <emphasis>"Save"</emphasis> button. However, class-level 
        constraint violations (such as the <literal>PersonChecker</literal> constraint) cannot be automatically associated to an input, and these violations 
        prevent the <literal>fValidator.validateEntity()</literal> call to succeed while nothing cannot be automatically displayed to the user.
        </para>
        <para>
        To solve this problem, three options are available:
        </para>
        <para>
        (1) Unhandled Violations with the "properties" Argument:
        </para>
        <programlisting role="AS3">
[Bindable]
[PersonChecker(properties="firstname,lastname"]
public class Person {
    ...
}
        </programlisting>
        <para>
        This tell the <literal>FormValidator</literal> to display the <literal>PersonChecker</literal> error message on both <literal>firstname</literal> 
        and <literal>lastname</literal> inputs. You may of course use only the <literal>firstname</literal> property or add another property at your convenience.
        </para>
        <para>
        (2) Unhandled Violations with the unhandledViolationsMessage Property:
        </para>
        <programlisting role="XML">
<![CDATA[<mx:Form id="personForm">
    <mx:FormItem label="Firstname">
        <s:TextInput id="iFirstname" text="@{person.firstname}"/>
    </mx:FormItem>
    <mx:FormItem label="Lastname" required="true">
        <s:TextInput id="iLastname" text="@{person.lastname}"/>
    </mx:FormItem>
    <s:Label text="{fValidator.unhandledViolationsMessage}"/>
</mx:Form>]]>
        </programlisting>
        <para>
        All violation messages that cannot be associated with any input will be diplayed in the label at the bottom of the form (separated by new lines).
        </para>
        <para>
        (3) Unhandled Violations with the unhandledViolations Event:
        </para>
        <programlisting role="XML">
<![CDATA[<fx:Declarations>
    <v:FormValidator id="fValidator" form="{personForm}" entity="{person}"
        unhandledViolations="showUnhandledViolations(event)"/>
</fx:Declarations>

<fx:Script>

    protected function showUnhandledViolations(event:ValidationResultEvent ):void {
        // display unhandled messages...
    }

</fx:Script>]]>
        </programlisting>
        <para>
        The third option let you do whatever you want with these unhandled violations. You can display the <literal>event.message</literal> somewhere 
        (it has the same format as the <literal>unhandledViolationsMessage</literal> property), you may loop over the <literal>event.results</literal> 
        (array of <literal>ValidationResult</literal>'s) or you may even call the <literal>fValidator.getUnhandledViolations</literal> method that will give 
        you the last unhandled <literal>ConstraintViolation instances</literal>.
        </para>
        
        <para>
        With Flex 3, because bidirectional bindings are not natively supported, you would have to use <literal>mx:Binding</literal> for each input. 
        With the above sample, you will add:
        </para>
        <programlisting role="XML">
<![CDATA[<mx:TextInput id="iFirstname" text="{person.firstname}"/>
...
<mx:TextInput id="iLastname" text="{person.lastname}"/>
...
<mx:Binding destination="person.firstname" source="iFirstname.text"/>
<mx:Binding destination="person.lastname" source="iLastname.text"/>]]>
        </programlisting>
        <para>
        Note also that with Tide, to simplify the cancel operations, you may reset the entity state with <literal>Managed.resetEntity(entity)</literal> 
        (see <link linkend="data.dirtycheck">Data Management</link>. This may be particularly useful if you are not creating a new person but modifying 
        an existing one.
        </para>
        <para>
        If you don't want or if you can't use bidirectional bindings, you may still use the <literal>FormValidator</literal> component but will need to 
        specify the property <literal>validationSubField</literal> for each input:
        </para>
        <programlisting role="XML">
<![CDATA[<fx:Declarations>
    <v:FormValidator id="fValidator" form="{personForm}" entity="{person}"/>
</fx:Declarations>

<fx:Script>

    [Bindable]
    protected var person:Person = new Person();

    protected function savePerson():void {

        person.firstname = iFirstname.text == "" ? null : iFirstname.text;
        person.lastname = iLastname.text == "" ? null : iLastname.text;

        if (fValidator.validateEntity()) {
            // actually save the validated person entity...
        }
    }

    protected function resetPerson():void {
        person = new Person();
    }
</fx:Script>

<mx:Form id="personForm">
    <mx:FormItem label="Firstname">
        <s:TextInput id="iFirstname" text="{person.firstname}"
            validationSubField="firstname"/>
    </mx:FormItem>
    <mx:FormItem label="Lastname" required="true">
        <s:TextInput id="iLastname" text="{person.lastname}"
            validationSubField="lastname"/>
    </mx:FormItem>
</mx:Form>]]>
        </programlisting>
        <para>
        This time, you have to set manually input values into your bean, but this will work with Flex 3 as well and these subfields may contain a path 
        to a subproperty: for example, if you have an <literal>Address</literal> bean in your <literal>Person</literal> bean, you could write 
        <literal>validationSubField="address.address1"</literal>.
        </para>
        <para>
        A last option to help the <literal>FormValidator</literal> detect the data bindings is to define a global list of properties which will be
        considered as UI component targets for bindings. By default, <literal>text</literal>, <literal>selected</literal>, <literal>selectedDate</literal>, 
        <literal>selectedItem</literal> and <literal>selectedIndex</literal> are prioritarily considered for binding detection so most standard controls
        work correctly (for example <literal>TextInput</literal>, <literal>TextArea</literal>, <literal>CheckBox</literal> or <literal>DatePicker</literal>).
        </para>
    </section>
    
    <section id="validation.compatibility">
        <title>Notes on compatibility</title>
        <para>
        All standard constraints should behave exactly in the same way as they behave in Java, except for some advanced Pattern usages: because the regular 
        expression support in ActionScript 3 may differ from the Java one (especially with supported 
        <ulink url="http://www.graniteds.org/public/doc/2.2.0/doc/as3/api/org/granite/validation/constraints/Pattern.html#flags">flags</ulink>), you should be aware 
        of few possible inconstancies between Pattern constraints written in Java and in ActionScript3.
        </para>
    </section>
</chapter>
