buildscript {
    repositories {
        mavenCentral()
    }
	
    dependencies {
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.5.0'
		classpath 'net.saliman:gradle-cobertura-plugin:1.1.2'
        classpath group: 'org.gradlefx', name: 'gradlefx', version: '0.6.4'
    }
}

group = 'org.graniteds'
version = granitedsVersion

ext.javadocLinks = [
	"http://download.oracle.com/javase/1.5.0/docs/api/",
	"http://docs.oracle.com/javaee/6/api",
	"http://logging.apache.org/log4j/1.2/apidocs/",
	"http://tomcat.apache.org/tomcat-6.0-doc/api/",
	"http://tomcat.apache.org/tomcat-7.0-doc/api/",
	"http://download.eclipse.org/jetty/stable-8/apidocs/",
	"http://download.eclipse.org/jetty/stable-9/apidocs/",
	"http://docs.jboss.org/hibernate/orm/3.5/javadocs/",
	"http://docs.jboss.com/seam/2.2.0.GA/api/",
	"http://docs.spring.io/spring/docs/3.1.x/javadoc-api/"
]

// Add Java plugin for all non-Flex subprojects
configure(subprojects.findAll { !it.name.startsWith('granite-client-flex') }) { subproject ->

	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	compileJava {
		sourceCompatibility=1.6
		targetCompatibility=1.6
	}
	compileTestJava {
		sourceCompatibility=1.6
		targetCompatibility=1.6
	}
	
	configurations {
		create('sources')
		create('javadoc')
	}

	task sourcesJar(type: Jar, dependsOn: 'classes') {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: 'javadoc') {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}
	
	jar {
		metaInf {
			from 'LICENSE.txt'
		}
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	dependencies {
		javadoc 'log4j:log4j:1.2.17'
		
		testCompile 'junit:junit:4.+'
	}

	javadoc {
		title 'GraniteDS API Documentation'
		
		classpath.add(configurations.javadoc)
		
		configure(options) {
			version = true
			author = true
			use = true
			linkSource = true
			// stylesheetFile = 'jdstyle.css'
			windowTitle = 'GraniteDS API Documentation'
			docTitle = 'GraniteDS API Documentation - ' + granitedsVersion
			links = rootProject.ext.javadocLinks
		}
	}	
}

// Add GradleFX plugin for all Flex subprojects
configure(subprojects.findAll { it.name.startsWith('granite-client-flex') }) { subproject ->
	
	apply plugin: 'gradlefx'
	apply plugin: 'flashbuilder'

	type = 'swc'
	output = subproject.name + '-' + granitedsVersion
	
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from files(srcDirs)
	}
	
	artifacts {
		archives sourcesJar
	}
}

// Add license plugin for all non-Flex subprojects
// license plugin is not compatible with GradleFX
configure(subprojects.findAll { !it.name.startsWith('granite-client-flex') }) { subproject ->

	apply plugin: JavaOnlyLicensePlugin
	
	license {
		header rootProject.file('HEADER-' + subproject.moduleLicense + '.txt')
		strictCheck true
		ext.year = Calendar.getInstance().get(Calendar.YEAR)
	}
}

class JavaOnlyLicensePlugin extends nl.javadude.gradle.plugins.license.LicensePlugin {
	
	private static Logger logger = Logging.getLogger(JavaOnlyLicensePlugin);
	
	protected void configureForSourceSet(SourceSet sourceSet, nl.javadude.gradle.plugins.license.License task) {
		super.configureForSourceSet(sourceSet, task)
		
		// Override default allSource and apply only to all Java source files from SourceSet (excluding resources)
		task.source = sourceSet.allJava
	}	
}

// Common configuration for all subprojects
// signing + maven deployment
configure(subprojects) { subproject ->

	apply plugin: 'maven'
	apply plugin: 'signing'
	
	configurations {
		deployerJars
	}
	
	repositories {
		mavenLocal()
		mavenCentral()
	}
	
	dependencies {
		deployerJars 'org.apache.maven.wagon:wagon-http:2.2'
	}
	
	signing {
		required { gradle.taskGraph.hasTask("uploadArchives") }
		sign configurations.archives
	}
	
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { 
					MavenDeployment deployment -> signing.signPom(deployment)
				}
				
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: sonatypeOssUserName, password: sonatypeOssPassword)
				}

				pom.project {
					name subproject.description
					packaging 'swc'
					description subproject.description
					url 'http://www.graniteds.org'
					
					scm {
						url 'scm:git@github.com:graniteds/graniteds.git'
						connection 'scm:git@github.com:graniteds/graniteds.git'
						developerConnection 'scm:git@github.com:graniteds/graniteds.git'
					}
					
					licenses {
							if (subproject.moduleLicense == 'lgpl') {
								license {
									name 'GNU LIBRARY GENERAL PUBLIC LICENSE, Version 2, June 1991'
									url 'http://www.gnu.org/licenses/old-licenses/lgpl-2.0-standalone.html'
									distribution 'repo'
								}
							}
							if (subproject.moduleLicense == 'gpl') {
								license {
									name 'GNU General Public License, Version 3, 29 June 2007'
									url 'http://www.gnu.org/licenses/gpl-3.0.en.html'
									distribution 'repo'
								}
							}
					}

					developers {
						developer {
							id 'fwolff'
							name 'Franck Wolff'
						}
						developer {
							id 'wdrai'
							name 'William Drai'
						}
					}
				}
			}
		}
	}
}

// Core project
// AMF/JMF Serialization + Remoting + Gravity + Tide server-side data management
project('granite-core') {
	
	description = 'GraniteDS Core server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'				// Should use 2.5 but 3.0 required by ServletGraniteContext.BasicRequest
		
		compile files('lib/jboss-vfs.jar')							// Used conditionally by VFSScanner impl
		compile files('lib/jboss-vfs3.jar')							// Used conditionally by VFS3Scanner impl
		compile files('lib/jbossmq.jar')							// Used by JBossMQSelector impl
		
		// Tide dependencies
		compile 'javax.interceptor:javax.interceptor-api:1.2'
		compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
		compile 'javax.jdo:jdo2-api:2.3-eb'
		compile 'javax.jms:jms-api:1.1-rev-1'
		compile 'javax.transaction:transaction-api:1.1-rev-1'
		compile 'javax.enterprise:cdi-api:1.0-SP4'					// Required for @NonBinding annotation on @DataEnabled
		compile 'log4j:log4j:1.2.17'
		
		compile project(':granite-seam').files('lib/jboss-seam.jar')		// Required @Scope annotation for Seam
	}
}

// Servlet 3 Integration for Gravity async I/O and auto configuration
project('granite-servlet3') {
	
	description = 'GraniteDS Servlet 3 support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'
		
		compile project(':granite-core')
	}
}

// Tomcat 6 support (security + gravity)
project('granite-tomcat6') {
	
	description = 'GraniteDS Tomcat 6 support server library'
	
	dependencies {
		compile 'org.apache.tomcat:catalina:6.0.32'
		
		compile project(':granite-core')
	}
}

// Tomcat 7+ support (security + gravity + websockets)
project('granite-tomcat7') {
	
	description = 'GraniteDS Tomcat 7 support server library'
	
	dependencies {
		compile 'org.apache.tomcat:tomcat-catalina:7.0.42'
		compile 'org.apache.tomcat:tomcat-coyote:7.0.42'
		
		compile project(':granite-core')
	}
}

// Jetty 6 support (security + gravity)
project('granite-jetty6') {
	
	description = 'GraniteDS Jetty 6 support server library'
	
	dependencies {
		compile 'org.mortbay.jetty:jetty:6.1.26'
		compile 'org.mortbay.jetty:jetty-util:6.1.26'
		
		compile project(':granite-core')
	}
}

// Jetty 8 support (security + gravity + websockets)
project('granite-jetty8') {
	
	description = 'GraniteDS Jetty 8 support server library'
	
	dependencies {
		compile 'org.eclipse.jetty:jetty-server:8.1.12.v20130726'
		compile 'org.eclipse.jetty:jetty-util:8.1.12.v20130726'
		compile 'org.eclipse.jetty:jetty-websocket:8.1.12.v20130726'
		
		compile project(':granite-core')
	}
}

// JBossWeb support (gravity)
project('granite-jbossweb') {
	
	description = 'GraniteDS JBossWeb (JBoss 5.1) support server library'
	
	dependencies {
		compile files('lib/jbossweb.jar')
		
		compile project(':granite-core')
	}
}

// GlassFish v2 support (security)
project('granite-glassfishv2') {
	
	description = 'GraniteDS GlassFish v2 support server library'
	
	dependencies {
		compile files('lib/appserv-rt.jar')
		
		compile project(':granite-core')
	}
}

// GlassFish v3 support (security + gravity + websockets)
project('granite-glassfishv3') {
	
	description = 'GraniteDS GlassFish v3+ support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'			// Must add because catalina comes with 2.5
		compile 'org.apache.tomcat:catalina:6.0.32'
		compile 'com.sun.grizzly:grizzly-utils:1.9.59'
		compile 'com.sun.grizzly:grizzly-websockets:1.9.59'
		
		compile project(':granite-core')
	}
}

// WebLogic support (security + gravity)
project('granite-weblogic') {
	
	description = 'GraniteDS WebLogic 10+ support server library'
	
	dependencies {
		compile files('lib/weblogic10-compat.jar')
		
		compile project(':granite-core')
	}
}

// Google App Engine support (serialization + gravity)
project('granite-appengine') {
	
	description = 'GraniteDS Google AppEngine support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'
		compile 'com.google.appengine:appengine-api-1.0-sdk:1.6.4'	// KeyConverter
		
		compile project(':granite-core')
	}
}


// ActiveMQ integration
project('granite-activemq') {
	
	description = 'GraniteDS ActiveMQ integration server library'
	
	dependencies {
		compile 'org.apache.activemq:activemq-core:5.7.0'
		
		compile project(':granite-core')
	}
}


// EJB 3 integration
project('granite-ejb') {
	
	description = 'GraniteDS EJB integration server library'
	
	configurations {
		create('glassFishTestRuntime')
		create('openEJBTestRuntime')
	}
	
	dependencies {
		compile 'javax.ejb:javax.ejb-api:3.2'
		
		compile project(':granite-core')
		
		testCompile 'org.apache.openejb:openejb-lite:4.5.0'
		testCompile 'org.glassfish.main.extras:glassfish-embedded-all:3.1.2'
		testCompile 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'
		testCompile 'org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:1.0.1'
		testCompile 'org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:1.0.1'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-api:1.1.3'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-spi:1.1.3'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-extension-openejb:1.0.0-alpha-13'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-extension-glassfish:1.0.0-alpha-13'
		
		testCompile project(':granite-core').sourceSets.test.output
	}
	
	task testGlassFish(type: Test) {
		systemProperties = [ 'ejb.container.className' : 'org.granite.test.tide.ejb.GlassFishV3Container' ]		
		
		includes = [ 'org/granite/test/tide/ejb/Test*' ]
		
		// Only GlassFish jars on the classpath
		classpath = project.sourceSets.test.runtimeClasspath.filter { !it.name.startsWith('openejb') }
	}
	
	task testOpenEJB(type: Test) {
		systemProperties = [ 'ejb.container.className' : 'org.granite.test.tide.ejb.OpenEJBContainer' ]
		
		includes = [ 'org/granite/test/tide/ejb/Test*' ]
		
		// Only OpenEJB jars on the classpath
		classpath = project.sourceSets.test.runtimeClasspath.filter { !it.name.startsWith('glassfish') }
	}
	
	test {
		it.dependsOn 'testGlassFish', 'testOpenEJB'
		
		excludes = [ '**' ]
	}
}

// CDI integration
project('granite-cdi') {
	
	description = 'GraniteDS CDI integration server library'
	
	dependencies {
		compile 'javax.enterprise:cdi-api:1.0-SP4'
		compile 'javax.el:javax.el-api:3.0.0'
		compile 'javax.inject:javax.inject:1'
		compile 'org.jboss.weld:weld-api:1.1.Final'
		compile 'org.jboss.weld:weld-spi:1.1.Final'
		compile 'org.jboss.weld:weld-core:1.1.14.Final'
		compile 'org.jboss.weld.servlet:weld-servlet:1.1.14.Final'
		compile 'org.jboss.interceptor:jboss-interceptor-core:2.0.0.Final'
		
		compile project(':granite-core')
		
		testCompile 'org.jboss.weld.se:weld-se-core:1.1.14.Final'
		
		testRuntime 'org.hibernate:hibernate-core:3.6.10.Final'
		testRuntime 'org.hibernate:hibernate-entitymanager:3.6.10.Final'
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	// Include core sources for tests for compilation
	// Note: force same output folder for resources and classes otherwise Weld does not find beans.xml
	sourceSets {
		main {
			output.resourcesDir = output.classesDir			
		}
		
		test {
			java {
				source project(':granite-core').sourceSets.test.java
			}
			resources {
				source project(':granite-core').sourceSets.test.resources
			}
			
			output.resourcesDir = output.classesDir
		}
	}
	
	test {
		includes = [ 'org/granite/test/tide/cdi/Test*' ]
	}
}

// Spring 3+ integration
project('granite-spring') {
	
	description = 'GraniteDS Spring 3+ integration server library'
	
	dependencies {
		compile 'javax.inject:javax.inject:1'
		compile 'org.springframework:spring-core:3.1.4.RELEASE'
		compile 'org.springframework:spring-context:3.1.4.RELEASE'
		compile 'org.springframework:spring-beans:3.1.4.RELEASE'
		compile 'org.springframework:spring-tx:3.1.4.RELEASE'
		compile 'org.springframework:spring-orm:3.1.4.RELEASE'
		compile 'org.springframework:spring-web:3.1.4.RELEASE'
		compile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-core:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-acl:3.1.4.RELEASE'
		compile 'org.springframework.data:spring-data-jpa:1.4.1.RELEASE'
		
		compile 'org.hibernate:hibernate-core:4.0.1.Final'
		
		compile project(':granite-core')
		
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		testCompile project(':granite-core').sourceSets.test.output
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime project(':granite-activemq')
	}

	test {
		includes = [ 'org/granite/test/tide/spring/Test*' ]
	}
}

// Spring 2 integration
project('granite-spring2') {
	
	apply plugin: 'java'
	
	description = 'GraniteDS Spring 2 integration server library'
	
	dependencies {
		compile 'org.springframework:spring-orm:3.1.4.RELEASE'								// Use Spring 3 to compile because of generics
		compile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-core:2.0.7.RELEASE'			// 2.0.8 broken in maven central
		compile 'org.springframework.security:spring-security-core-tiger:2.0.7.RELEASE'
		compile 'org.springframework.security:spring-security-acl:2.0.7.RELEASE'
		compile 'org.acegisecurity:acegi-security:1.0.7'
		compile 'org.aspectj:aspectjrt:1.5.4'
		compile 'org.hibernate:hibernate-core:3.6.10.Final'
		
		compile project(':granite-core')
	}
	
	sourceSets {
		main {
			java {
				source project(':granite-spring').sourceSets.main.java
				exclude 'org/granite/spring/data/*', 'org/granite/spring/security/*', 
					'org/granite/tide/spring/data/*', 'org/granite/tide/spring/security/*',
					'org/granite/tide/spring/Hibernate4*'
			}
		}
	}
}

// Seam 2.1 integration
project('granite-seam') {
	
	description = 'GraniteDS Seam 2.1+ integration server library'
	
	dependencies {
		compile files('lib/jboss-seam.jar')
		compile 'javax.faces:jsf-api:1.2_15'
		
		compile project(':granite-core')
		compile project(':granite-hibernate')
		
		testCompile project(':granite-core').sourceSets.test.output
		
		testRuntime 'javassist:javassist:3.12.0.GA'
		testRuntime 'javax.el:el-api:1.0'
		testRuntime 'org.hibernate:hibernate-entitymanager:3.3.2.GA'
		testRuntime project(':granite-hibernate').files('lib/hibernate-validator.jar')
		testRuntime files('lib/jboss-el.jar')
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	// Ensure tests find seam.properties and other resources
	sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
	sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
}


// Hibernate 3.x support
project('granite-hibernate') {
	
	description = 'GraniteDS Hibernate 3.x support library'
	
	dependencies {
		compile 'org.hibernate:hibernate-core:3.6.10.Final'
		compile files('lib/hibernate-validator.jar')			// Not in maven central
		
		compile project(':granite-core')
		
		testCompile project(':granite-core').sourceSets.test.output
		testCompile 'org.hibernate:hibernate-entitymanager:3.6.10.Final'
		
		testCompile project(':granite-spring').sourceSets.main.output
		testCompile 'org.springframework:spring-orm:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	}
	
	// Recompile abstract test classes from Spring module with Hibernate 3
	sourceSets {
		test {
			java {
				source project(':granite-spring').sourceSets.test.java
			}
			resources {
				source project(':granite-spring').sourceSets.test.resources
			}
		}
	}
	
	test {
		includes = [ 'org/granite/test/hibernate/**/Test*', 'org/granite/test/tide/hibernate/**/Test*' ]
	}
}

// Hibernate 4+ support
project('granite-hibernate4') {
	
	description = 'GraniteDS Hibernate 4.x support library'
	
	dependencies {
		compile 'org.hibernate:hibernate-core:4.0.1.Final'
		
		compile project(':granite-core')
		
		testCompile project(':granite-core').sourceSets.test.output
		testCompile 'org.hibernate:hibernate-entitymanager:4.0.1.Final'
		
		testCompile project(':granite-spring').sourceSets.main.output
		testCompile 'org.springframework:spring-orm:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	}
	
	// Recompile abstract test classes from Spring module with Hibernate 3
	sourceSets {
		test {
			java {
				source project(':granite-spring').sourceSets.test.java
			}
			resources {
				source project(':granite-spring').sourceSets.test.resources
			}
		}
	}
	
	test {
		includes = [ 'org/granite/test/hibernate4/**/Test*', 'org/granite/test/tide/hibernate4/**/Test*' ]
	}
}

// EclipseLink support
project('granite-eclipselink') {
	
	description = 'GraniteDS EclipseLink support library'
	
	dependencies {
		compile 'org.eclipse.persistence:eclipselink:2.5.0'
		
		compile project(':granite-core')
		
		testCompile project(':granite-core').sourceSets.test.output
		
		testRuntime 'com.h2database:h2:1.3.173'
	}
	
	File eclipselink = configurations.compile.find { it.name.startsWith('eclipselink') }
	
	test {
		jvmArgs = [ '-javaagent:' + eclipselink.path ]
		
		includes = [ 'org/granite/test/eclipselink/**/Test*' ]
	}
}

// TopLink Essentials support
project('granite-toplink') {
	
	description = 'GraniteDS TopLink Essentials support library'
	
	dependencies {
		compile files('lib/toplink-essentials.jar')
		
		compile project(':granite-core')
	}
}

// DataNucleus support
project('granite-datanucleus') {
	
	description = 'GraniteDS DataNucleus support library'
	
	dependencies {
		compile 'org.datanucleus:datanucleus-core:3.2.7'
		compile 'org.datanucleus:datanucleus-api-jpa:3.2.5'
		compile 'org.datanucleus:datanucleus-api-jdo:3.2.4'
		
		compile project(':granite-core')
		
		testCompile project(':granite-core').sourceSets.test.output
		
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime 'org.datanucleus:datanucleus-rdbms:3.2.6'
	}
	
	// Fore same output folder for test resources and classes otherwise tests don't work
	// sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
	
	File datanucleusCore = configurations.compile.find { it.name.startsWith('datanucleus-core') }
	
	// Enhance test classes for JPA
	task testJPA(type: Test) {
		jvmArgs = [ '-javaagent:' + datanucleusCore.path + '=-api=JPA,org.granite.test.externalizers' ]
		
		includes = [ 'org/granite/test/datanucleus/**/TestDataNucleus*' ]
	}
	
	// Enhance test classes for JDO
	task testJDO(type: Test) {
		jvmArgs = [ '-javaagent:' + datanucleusCore.path + '=-api=JDO,org.granite.test.externalizers' ]
		
		includes = [ 'org/granite/test/datanucleus/**/TestJDODataNucleus*' ]
	}
	
	test {
		it.dependsOn 'testJPA', 'testJDO'
		
		excludes = [ '**' ]
	}
}

// OpenJPA support
project('granite-openjpa') {
	
	description = 'GraniteDS OpenJPA support library'
	
	dependencies {
		compile 'org.apache.openjpa:openjpa:2.2.2'
		
		compile project(':granite-core')
		testCompile project(':granite-core').sourceSets.test.output
		
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	File openjpa = configurations.compile.find { it.name.startsWith('openjpa') }
	
	test {
		jvmArgs = [ '-javaagent:' + openjpa ]
		
		includes = [ 'org/granite/test/openjpa/**/Test*' ]
	}
}

// Bean Validation support
project('granite-beanvalidation') {
	
	description = 'GraniteDS Bean Validation support library'

	dependencies {
		compile 'javax.validation:validation-api:1.0.0.GA'
		
		compile project(':granite-core')
	}
}


// Flex client library
project('granite-client-flex') {
	
	description = "GraniteDS Flex client library"
	
	srcDirs = [ 'src/main/flex' ]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '3.6', ext: 'zip'
	}
}

// Flex advanced client library (tide, math, validation)
project('granite-client-flex-advanced') {
	
	description = "GraniteDS Advanced Flex client library"
	
	srcDirs = [ 'src/main/flex' ]

	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '3.6', ext: 'zip'
		
		external project(':granite-client-flex')
	}
	
	additionalCompilerOptions = [
		'-define=CONFIG::debugging,false',
		'-define=CONFIG::flex40,true',
		'-define=CONFIG::flex45,false'
	]
}

// Flex 4.5+ advanced client library (tide, math, validation)
// Tests are ran only on Flex 4.5
project('granite-client-flex45-advanced') {
	
	description = "GraniteDS Advanced Flex 4.5+ client library"
	
	// Use the same source dir than Flex 3.5-4.1
	srcDirs = [ project(':granite-client-flex-advanced').file('src/main/flex').path ]
	testDirs = [ 'src/test/flex' ]
	
	additionalCompilerOptions = [
		'-define=CONFIG::debugging,false',
		'-define=CONFIG::flex40,false',
		'-define=CONFIG::flex45,true'
	]

	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		external project(':granite-client-flex')
		
		test files('lib/flexunit-core-flex-4.1.0.swc')
		test files('lib/flexunit-cilistener-4.1.0.swc')
		test files('lib/flexunit-uilistener-4.1.0.swc')
		test files('lib/flexUnitTasks-4.1.0.jar')
	}
	
	flexUnit {
		includes = [ '**/Test*' ]
		
		command = 'C:/Dev/flex-sdk-4.5/runtimes/player/10.2/win/FlashPlayerDebugger.exe'
	}
}


// Java client library
project('granite-client-java') {
    description = 'GraniteDS Java client'

    dependencies {

		// Dependencies from granite-core
		compile 'javax.servlet:javax.servlet-api:3.0.1'				// Should use 2.5 but 3.0 required by ServletGraniteContext.BasicRequest
		compile 'log4j:log4j:1.2.17'
		
        compile 'org.apache.httpcomponents:httpasyncclient:4.0-beta4',
                'javax.enterprise:cdi-api:1.0-SP4',
                'javax.inject:javax.inject:1',
                'net.sf.extcos:extcos:0.3b',
                'org.eclipse.jetty:jetty-client:8.1.+',
                'org.eclipse.jetty:jetty-websocket:8.1.+',
                'javax.validation:validation-api:1.0.0.GA',
                'org.springframework:spring-beans:3.1.4.RELEASE',
                'org.springframework:spring-context:3.1.4.RELEASE'
    }
	
	sourceSets {
		main {
			java {
				source project(':granite-core').sourceSets.main.java
			}			
			resources {
				source project(':granite-core').sourceSets.main.resources
			}
		}
	}
	
	// For some reaons excludes must be applied on filter after the sourceSets definitions 
	sourceSets.main.java.filter.exclude 'org/granite/clustering/*Session*',
		'org/granite/clustering/TransientReferenceHolder*',
		'org/granite/config/Abstract*',
		'org/granite/config/Servlet*',
		'org/granite/config/ConfigProvider*',
		'org/granite/config/*Listener*',
		'org/granite/config/flex/Servlet*',
		'org/granite/gravity/**',
		'org/granite/tide/**',
		'org/granite/messaging/amf/process/*Processor.java',
		'org/granite/messaging/amf/io/convert/impl/GAE*.java',
		'org/granite/messaging/persistence/*Externalizable*.java',
		'org/granite/messaging/service/security/AbstractSecurityService.java',
		'org/granite/messaging/service/security/GlassFish*.java',
		'org/granite/messaging/service/security/Jetty*.java',
		'org/granite/messaging/service/security/Tomcat*.java',
		'org/granite/messaging/service/security/WebLogic*.java',
		'org/granite/messaging/service/Abstract*.java',
		'org/granite/messaging/service/ServiceFactory*.java',
		'org/granite/messaging/service/ServiceInvoker*.java',
		'org/granite/messaging/service/Simple*.java',
		'org/granite/messaging/service/DefaultServiceExceptionHandler*.java',
		'org/granite/messaging/service/ExtendedServiceExceptionHandler*.java',
		'org/granite/messaging/webapp',
		'org/granite/messaging/webapp/**/*.java',
		'org/granite/util/Entity.java',
		'org/granite/util/Servlet*.java',
		'org/granite/jmx',
		'org/granite/jmx/*.java',
		'org/granite/scan/VFS*.java'
		
	sourceSets.main.resources.filter.exclude 'org/granite/config/granite-config.xml' 
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
	
    test {
        exclude 'org/granite/client/test/websocket/**'
    }
}