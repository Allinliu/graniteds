buildscript {
    repositories {
        mavenCentral()
		mavenRepo name: 'Bintray Asciidoctor repo', url: 'http://dl.bintray.com/content/aalmiray/asciidoctor'
		mavenRepo name: 'Bintray JCenter', url: 'http://jcenter.bintray.com'
    }
	
    dependencies {
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.0'
		classpath 'net.saliman:gradle-cobertura-plugin:1.1.2'
        classpath group: 'org.gradlefx', name: 'gradlefx', version: '0.6.4'
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.4.1'
    }
}

group = 'org.graniteds'
version = granitedsVersion

ext.javadocLinks = [
	"http://download.oracle.com/javase/1.5.0/docs/api/",
	"http://docs.oracle.com/javaee/6/api",
	"http://logging.apache.org/log4j/1.2/apidocs/",
	"http://tomcat.apache.org/tomcat-6.0-doc/api/",
	"http://tomcat.apache.org/tomcat-7.0-doc/api/",
	"http://download.eclipse.org/jetty/stable-8/apidocs/",
	"http://download.eclipse.org/jetty/stable-9/apidocs/",
	"http://docs.jboss.org/hibernate/orm/3.5/javadocs/",
	"http://docs.jboss.com/seam/2.2.0.GA/api/",
	"http://docs.spring.io/spring/docs/3.1.x/javadoc-api/"
]

// Main tasks for eclipse
task buildServer {
	dependsOn ':granite-server:buildDependents', ':granite-server:buildNeeded'
}

task buildJavaClient {
	dependsOn ':granite-client-java-advanced:buildDependents', ':granite-client-java-advanced:buildNeeded',
		':granite-client-javafx:buildDependents', ':granite-client-javafx:buildNeeded',
		':granite-client-android:buildDependents', ':granite-client-android:buildNeeded'
}

task buildFlexClient {
	dependsOn ':granite-client-flex:build', 'granite-client-flex-advanced:build', 'granite-client-flex45-advanced:build'
}

task build {
	dependsOn 'buildServer', 'buildJavaClient', 'buildFlexClient'
}


configure(subprojects) {
	
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

// Add Java plugin for all non-Flex subprojects
configure(subprojects.findAll { !it.name.startsWith('granite-client-flex') && it.name != 'granite-server' && it.name != 'granite-generator-share' && it.name != 'reference-docs' }) { subproject ->

	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	compileJava {
		sourceCompatibility=1.6
		targetCompatibility=1.6
	}
	compileTestJava {
		sourceCompatibility=1.6
		targetCompatibility=1.6
	}
	
	[compileJava, compileTestJava]*.options*.compilerArgs = [
		"-Xlint:varargs",
		"-Xlint:cast",
		"-Xlint:classfile",
		"-Xlint:dep-ann",
		"-Xlint:divzero",
		"-Xlint:empty",
		"-Xlint:finally",
		"-Xlint:overrides",
		"-Xlint:path",
		"-Xlint:processing",
		"-Xlint:static",
		"-Xlint:try",
		"-Xlint:serial",
		"-Xlint:-options",
		"-Xlint:-fallthrough",
		"-Xlint:-rawtypes",
		"-Xlint:-deprecation",
		"-Xlint:-unchecked"
	]
	
	configurations {
		create('javadoc')
	}

	task sourcesJar(type: Jar, dependsOn: 'classes') {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: 'javadoc') {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}
	
	jar {
		metaInf {
			from 'LICENSE.txt'
		}
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	dependencies {
		javadoc 'log4j:log4j:1.2.17'
		
		testCompile 'junit:junit:4.11'
	}

	javadoc {
		title 'GraniteDS API Documentation'
		
		classpath.add(configurations.javadoc)
		
		configure(options) {
			version = true
			author = true
			use = true
			linkSource = true
			// stylesheetFile = 'jdstyle.css'
			windowTitle = 'GraniteDS API Documentation'
			docTitle = 'GraniteDS API Documentation - ' + granitedsVersion
			links = rootProject.ext.javadocLinks
		}
	}	
}

// Add GradleFX plugin for all Flex subprojects
configure(subprojects.findAll { it.name.startsWith('granite-client-flex') }) { subproject ->
	
	apply plugin: 'gradlefx'
	apply plugin: 'flashbuilder'
	
	output = 'libs/' + subproject.name
		
	beforeEvaluate {
		if (configurations.flexSDK.resolvedConfiguration.hasError()) {
			println 'Project ' + subproject.name + ': Flex SDK not found, disable build of Flex libraries'
			subproject.configurations.remove(subproject.configurations.flexSDK)
			subproject.configurations.create('flexSDK')
			subproject.flexHome = project(':granite-client-flex').file('flex-sdk')
			subproject.tasks.each { it.enabled = false }
		}
	}
}

// Add license plugin for all subprojects
// Use a modified version of the license plugin to be compatible with GradleFX
configure(subprojects.findAll { it.name != 'granite-server' && it.name != 'granite-generator-share' && it.name != 'reference-docs' }) { subproject ->

	apply plugin: ExtLicensePlugin
	
	license {
		header rootProject.file('HEADER-' + subproject.moduleLicense + '.txt')
		strictCheck true
		ext.year = Calendar.getInstance().get(Calendar.YEAR)
		mapping('as', 'SLASHSTAR_STYLE')
	}
}

import nl.javadude.gradle.plugins.license.License
import nl.javadude.gradle.plugins.license.LicensePlugin


class ExtLicensePlugin extends LicensePlugin {
	
	private static Logger logger = Logging.getLogger(ExtLicensePlugin);
	
	void apply(Project project) {
        this.project = project

        extension = createExtension()
        configureExtensionRule()
		
        project.plugins.withType(JavaBasePlugin) {
            extension.sourceSets.all { SourceSet sourceSet ->
                def sourceSetTaskName = sourceSet.getTaskName(taskBaseName, null)
                logger.info("Adding license tasks for sourceSet ${sourceSetTaskName}");

                License checkTask = project.tasks.add(sourceSetTaskName, License)
                checkTask.check = true
                configureForSourceSet(sourceSet, checkTask)

                // Add license checking into check lifecycle, since its a type of code quality plugin
                project.tasks[JavaBasePlugin.CHECK_TASK_NAME].dependsOn checkTask

                // Add independent license task, which will perform format
                def sourceSetFormatTaskName = sourceSet.getTaskName(taskBaseName + 'Format', null)
                License formatTask = project.tasks.add(sourceSetFormatTaskName, License)
                formatTask.check = false
                configureForSourceSet(sourceSet, formatTask)
            }
        }
		
		project.plugins.withType(org.gradlefx.plugins.GradleFxPlugin) {
			logger.info("Adding license tasks for Flex");
			
			License checkTask = project.tasks.add('licenseFlex', License)
			checkTask.check = true
			checkTask.description = 'Scanning license on Flex files'
			checkTask.source = [ 'src/main/flex', 'src/test/flex' ]

			// Add license checking into check lifecycle, since its a type of code quality plugin
			project.tasks['compileFlex'].dependsOn checkTask
			
			// Add independent license task, which will perform format
			License formatTask = project.tasks.add('licenseFormatFlex', License)
			formatTask.check = false
			formatTask.description = 'Scanning license on Flex files'
			formatTask.source = [ 'src/main/flex', 'src/test/flex' ]
        }		
			
        configureTaskRule()
    }

	protected void configureForSourceSet(SourceSet sourceSet, nl.javadude.gradle.plugins.license.License task) {
		super.configureForSourceSet(sourceSet, task)
		
		// Override default allSource and apply only to all Java source files from SourceSet (excluding resources)
		task.source = sourceSet.allJava
	}	
}

// Common configuration for all subprojects
// signing + maven deployment
configure(subprojects.findAll { it.name != 'reference-docs' && !it.name.endsWith('-doc') && !it.name.endsWith('-tests') }) { subproject ->
	
	apply plugin: 'maven'
	apply plugin: 'signing'

    group = 'org.graniteds'
    version = granitedsVersion

	configurations {
		deployerJars
	}
	
	dependencies {
		deployerJars 'org.apache.maven.wagon:wagon-http:2.2'
	}
	
	signing {
		required { gradle.taskGraph.hasTask("uploadArchives") }
		sign configurations.archives
	}

    // Adds an install task for Flex projects because maven plugin does not add it for GradleFx projects
    if (subproject.name.startsWith('granite-client-flex')) {
        task install(type: Upload, dependsOn: 'build') {
            configuration = subproject.configurations.archives
            description = 'Installs the \'archives\' artifacts into the local Maven repository.'
            repositories.mavenInstaller()
        }
    }

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { 
					MavenDeployment deployment -> signing.signPom(deployment)
				}
				
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: sonatypeOssUserName, password: sonatypeOssPassword)
				}

				pom.project {
					name subproject.description
					packaging 'swc'
					description subproject.description
					url 'http://www.graniteds.org'
					
					scm {
						url 'scm:git@github.com:graniteds/graniteds.git'
						connection 'scm:git@github.com:graniteds/graniteds.git'
						developerConnection 'scm:git@github.com:graniteds/graniteds.git'
					}
					
					licenses {
							if (subproject.moduleLicense == 'lgpl') {
								license {
									name 'GNU LIBRARY GENERAL PUBLIC LICENSE, Version 2.1, February 1999'
									url 'http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
									distribution 'repo'
								}
							}
							if (subproject.moduleLicense == 'gpl') {
								license {
									name 'GNU General Public License, Version 3, 29 June 2007'
									url 'http://www.gnu.org/licenses/gpl-3.0.en.html'
									distribution 'repo'
								}
							}
					}

					developers {
						developer {
							id 'fwolff'
							name 'Franck Wolff'
						}
						developer {
							id 'wdrai'
							name 'William Drai'
						}
					}
				}
			}
		}
	}
}

// Core project
// AMF/JMF Serialization + Remoting + Gravity + Tide server-side data management
project('granite-server-core') {
	
	description = 'GraniteDS Core server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'				// Should use 2.5 but 3.0 required by ServletGraniteContext.BasicRequest

		compile 'javassist:javassist:3.12.1.GA'
        compile 'log4j:log4j:1.2.17'
        compile 'org.slf4j:slf4j-api:1.7.0'

		// Tide dependencies
		compile 'org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:1.0.1.Final'
		compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
		compile 'javax.jdo:jdo2-api:2.3-eb'
		compile 'javax.jms:jms-api:1.1-rev-1'
		compile 'javax.transaction:transaction-api:1.1-rev-1'
		compile 'javax.enterprise:cdi-api:1.0-SP4'					// Required for @NonBinding annotation on @DataEnabled
	}
}

// Servlet 3 Integration for Gravity async I/O and auto configuration
project('granite-server-servlet3') {
	
	description = 'GraniteDS Servlet 3 support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'
		
		compile project(':granite-server-core')
	}
}

// Tomcat 6 support (security + gravity)
project('granite-server-tomcat6') {
	
	description = 'GraniteDS Tomcat 6 support server library'
	
	dependencies {
		compile 'org.apache.tomcat:catalina:6.0.32'
		
		compile project(':granite-server-core')
	}
}

// Tomcat 7+ support (security + gravity + websockets)
project('granite-server-tomcat7') {
	
	description = 'GraniteDS Tomcat 7 support server library'
	
	dependencies {
		compile 'org.apache.tomcat:tomcat-catalina:7.0.42'
		compile 'org.apache.tomcat:tomcat-coyote:7.0.42'
		
		compile project(':granite-server-core')
	}
}

// Jetty 6 support (security + gravity)
project('granite-server-jetty6') {
	
	description = 'GraniteDS Jetty 6 support server library'
	
	dependencies {
		compile 'org.mortbay.jetty:jetty:6.1.26'
		compile 'org.mortbay.jetty:jetty-util:6.1.26'
		
		compile project(':granite-server-core')
	}
}

// Jetty 8 support (security + gravity + websockets)
project('granite-server-jetty8') {
	
	description = 'GraniteDS Jetty 8 support server library'
	
	dependencies {
		compile 'org.eclipse.jetty:jetty-server:8.1.12.v20130726'
		compile 'org.eclipse.jetty:jetty-util:8.1.12.v20130726'
		compile 'org.eclipse.jetty:jetty-websocket:8.1.12.v20130726'
		
		compile project(':granite-server-core')
	}
}

// JBossWeb support (gravity)
project('granite-server-jboss') {
	
	description = 'GraniteDS JBoss support server library'
	
	dependencies {
		compile files('lib/jbossweb.jar')

        compile files('lib/jboss-vfs.jar')							// Used conditionally by VFSScanner impl
        compile files('lib/jboss-vfs3.jar')							// Used conditionally by VFS3Scanner impl
        compile files('lib/jbossmq.jar')							// Used by JBossMQSelector impl

        compile project(':granite-server-core')
	}
}

// GlassFish v2 support (security)
project('granite-server-glassfishv2') {
	
	description = 'GraniteDS GlassFish v2 support server library'
	
	dependencies {
		compile files('lib/appserv-rt.jar')
		
		compile project(':granite-server-core')
	}
}

// GlassFish v3 support (security + gravity + websockets)
project('granite-server-glassfishv3') {
	
	description = 'GraniteDS GlassFish v3+ support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'			// Must add because catalina comes with 2.5
		compile 'org.apache.tomcat:catalina:6.0.32'
		compile 'com.sun.grizzly:grizzly-utils:1.9.59'
		compile 'com.sun.grizzly:grizzly-websockets:1.9.59'
		
		compile project(':granite-server-core')
	}
}

// UDP Integration for Gravity
project('granite-server-udp') {
	
	description = 'GraniteDS UDP support server library'
	
	dependencies {
		compile project(':granite-server-core')
	}
}

// UDP Integration for Gravity (Java client)
project('granite-client-java-udp') {
	
	description = 'GraniteDS UDP support client library (Java)'
	
	dependencies {
		compile project(':granite-server-udp')
		compile project(':granite-client-java')
		compile project(':granite-server-servlet3')
	}
}

// WebLogic support (security + gravity)
project('granite-server-weblogic') {
	
	description = 'GraniteDS WebLogic 10+ support server library'
	
	dependencies {
		compile files('lib/weblogic10-compat.jar')
		
		compile project(':granite-server-core')
	}
}

// Google App Engine support (serialization + gravity)
project('granite-server-appengine') {
	
	description = 'GraniteDS Google AppEngine support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'
		compile 'com.google.appengine:appengine-api-1.0-sdk:1.6.4'	// KeyConverter
		
		compile project(':granite-server-core')
	}
}


// ActiveMQ integration
project('granite-server-activemq') {
	
	description = 'GraniteDS ActiveMQ integration server library'
	
	dependencies {
		compile 'org.apache.activemq:activemq-core:5.7.0'
		
		compile project(':granite-server-core')
	}
}


// All server libs
project('granite-server') {

	description = 'GraniteDS Server all libs'
	
	apply plugin: 'java'
	
	def coreProjects = [
		':granite-server-core',
		':granite-server-servlet3',
		':granite-server-tomcat6',
		':granite-server-tomcat7',
		':granite-server-jetty6',
		':granite-server-jetty8',
		':granite-server-jboss',
		':granite-server-glassfishv2',
		':granite-server-glassfishv3',
		':granite-server-weblogic',
		':granite-server-activemq'
	]
	
	def allProjects = coreProjects + [
		':granite-server-cdi',
		':granite-server-ejb',
		':granite-server-spring',
		':granite-server-spring2',
		':granite-server-seam',
		':granite-server-hibernate',
		':granite-server-hibernate4',
		':granite-server-datanucleus',
		':granite-server-eclipselink',
		':granite-server-openjpa',
		':granite-server-toplink',
		':granite-server-beanvalidation',
        ':granite-server-appengine'
	]
	
	dependencies {
		coreProjects.each {
			compile project(it)
		}
	}
	
	configurations {
		create('sources')
		create('javadoc')
	}
	
	task sourcesJar(type: Jar, dependsOn: 'classes') {
		classifier = 'sources'
		
		coreProjects.each { 
			from project(it).sourceSets.main.allSource 
		}
	}
	
	task javadocJar(type: Jar, dependsOn: 'javadoc') {
		classifier = 'javadoc'

        from javadoc.destinationDir
	}
	
	jar {
		coreProjects.each {
			from project(it).sourceSets.main.output.classesDir
			from project(it).sourceSets.main.output.resourcesDir
		}
		
		metaInf {
			from 'LICENSE.txt'
		}
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	dependencies {
		javadoc 'log4j:log4j:1.2.17'
		
		testCompile 'junit:junit:4.11'
	}

	javadoc {
		title 'GraniteDS API Documentation'

        allProjects.each {
            source project(it).sourceSets.main.allJava
        }
		
		classpath.add(configurations.javadoc)

        allProjects.each {
            classpath.add(project(it).sourceSets.main.compileClasspath)
        }
		
		configure(options) {
			version = true
			author = true
			use = true
			linkSource = true
			// stylesheetFile = 'jdstyle.css'
			windowTitle = 'GraniteDS API Documentation'
			docTitle = 'GraniteDS API Documentation - ' + granitedsVersion
			links = rootProject.ext.javadocLinks
		}
	}

    // Remove granite-server-* dependencies from pom, the jar already contains everything
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.whenConfigured { pom ->
                    pom.dependencies.removeAll(
                        pom.dependencies.findAll { it.groupId == 'org.graniteds' && it.artifactId.startsWith('granite-server') }
                    )
                }
            }
        }
    }
}

// Lib shared with generator
project('granite-generator-share') {

    description = 'GraniteDS generator shared'

    apply plugin: 'java'

    dependencies {
        compile project(':granite-server-core')
    }

    configurations {
        create('sources')
        create('javadoc')
    }

    task sourcesJar(type: Jar, dependsOn: 'classes') {
        classifier = 'sources'

        from project(':granite-server-core').sourceSets.main.allSource
        include 'org/granite/messaging/amf/io/util/Property.java',
                'org/granite/messaging/amf/io/util/externalizer/Externalizer.java',
                'org/granite/messaging/amf/io/util/externalizer/annotation/**',
                'org/granite/messaging/service/annotations/**',
                'org/granite/messaging/annotations/**',
                'org/granite/messaging/service/security/*DestinationSecurizer.java',
                'org/granite/tide/annotations/**',
                'org/granite/tide/data/Lazy.java'
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        classifier = 'javadoc'

        from project(':granite-server-core').javadoc.destinationDir
        include 'org/granite/messaging/amf/io/util/Property.html',
                'org/granite/messaging/amf/io/util/externalizer/Externalizer.html',
                'org/granite/messaging/amf/io/util/externalizer/annotation/**',
                'org/granite/messaging/service/annotations/**',
                'org/granite/messaging/annotations/**',
                'org/granite/messaging/service/security/*DestinationSecurizer.html',
                'org/granite/tide/annotations/**',
                'org/granite/tide/data/Lazy.html'
    }

    jar {
        from project(':granite-server-core').sourceSets.main.output.classesDir
        include 'org/granite/messaging/amf/io/util/Property.class',
                'org/granite/messaging/amf/io/util/externalizer/Externalizer.class',
                'org/granite/messaging/amf/io/util/externalizer/annotation/**',
                'org/granite/messaging/service/annotations/**',
                'org/granite/messaging/annotations/**',
                'org/granite/messaging/service/security/*DestinationSecurizer.class',
                'org/granite/tide/annotations/**',
                'org/granite/tide/data/Lazy.class'

        metaInf {
            from 'LICENSE.txt'
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    dependencies {
        javadoc 'log4j:log4j:1.2.17'

        testCompile 'junit:junit:4.11'
    }

    javadoc {
        title 'GraniteDS API Documentation'

        classpath.add(configurations.javadoc)

        configure(options) {
            version = true
            author = true
            use = true
            linkSource = true
            // stylesheetFile = 'jdstyle.css'
            windowTitle = 'GraniteDS API Documentation'
            docTitle = 'GraniteDS API Documentation - ' + granitedsVersion
            links = rootProject.ext.javadocLinks
        }
    }
}


// Generator (engine + ant task)
project('granite-generator') {

    description = 'GraniteDS Code generator'

    dependencies {
        compile 'org.codehaus.groovy:groovy:1.6.4'
        compile 'org.apache.ant:ant:1.8.4'
        compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
        compile 'javax.jdo:jdo2-api:2.3-eb'

        compile project(':granite-generator-share')
    }
}


// EJB 3 integration
project('granite-server-ejb') {
	
	description = 'GraniteDS EJB integration server library'
	
	configurations {
		create('glassFishTestRuntime')
		create('openEJBTestRuntime')
	}
	
	dependencies {
		compile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1.0.2.Final'
		
		compile project(':granite-server-core')
		
		testCompile 'org.apache.openejb:openejb-lite:4.5.0'
		testCompile 'org.glassfish.main.extras:glassfish-embedded-all:3.1.2'
		testCompile 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'
		testCompile 'org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:1.0.1'
		testCompile 'org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:1.0.1'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-api:1.1.3'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-spi:1.1.3'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-extension-openejb:1.0.0-alpha-13'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-extension-glassfish:1.0.0-alpha-13'
		
		testCompile project(':granite-server-core').sourceSets.test.output
	}
	
	task testGlassFish(type: Test) {
		systemProperties = [ 'ejb.container.className' : 'org.granite.test.tide.ejb.GlassFishV3Container' ]		
		
		includes = [ 'org/granite/test/tide/ejb/Test*' ]
		
		// Only GlassFish jars on the classpath
		classpath = project.sourceSets.test.runtimeClasspath.filter { !it.name.startsWith('openejb') }
	}
	
	task testOpenEJB(type: Test) {
		systemProperties = [ 'ejb.container.className' : 'org.granite.test.tide.ejb.OpenEJBContainer' ]
		
		includes = [ 'org/granite/test/tide/ejb/Test*' ]
		
		// Only OpenEJB jars on the classpath
		classpath = project.sourceSets.test.runtimeClasspath.filter { !it.name.startsWith('glassfish') }
	}
	
	test {
		it.dependsOn 'testGlassFish', 'testOpenEJB'
		
		excludes = [ '**' ]
	}
}

// CDI integration
project('granite-server-cdi') {
	
	description = 'GraniteDS CDI integration server library'
	
	dependencies {
		compile 'javax.enterprise:cdi-api:1.0-SP4'
		compile 'javax.el:el-api:2.2.1-b04'
		compile 'javax.inject:javax.inject:1'
		compile 'org.jboss.weld:weld-api:1.1.Final'
		compile 'org.jboss.weld:weld-spi:1.1.Final'
		compile 'org.jboss.weld:weld-core:1.1.14.Final'
		compile 'org.jboss.weld.servlet:weld-servlet:1.1.14.Final'
		compile 'org.jboss.interceptor:jboss-interceptor-core:2.0.0.Final'
		
		compile project(':granite-server-core')
		
		testCompile 'org.jboss.weld.se:weld-se-core:1.1.14.Final'
		
		testRuntime 'org.hibernate:hibernate-core:3.6.10.Final'
		testRuntime 'org.hibernate:hibernate-entitymanager:3.6.10.Final'
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	// Include core sources for tests for compilation
	// Note: force same output folder for resources and classes otherwise Weld does not find beans.xml
	sourceSets {
		main {
			output.resourcesDir = output.classesDir			
		}
		
		test {
			java {
				source project(':granite-server-core').sourceSets.test.java
			}
			resources {
				source project(':granite-server-core').sourceSets.test.resources
			}
			
			output.resourcesDir = output.classesDir
		}
	}
	
	test {
		includes = [ 'org/granite/test/tide/cdi/Test*' ]
	}
}

// Spring 3+ integration
project('granite-server-spring') {
	
	description = 'GraniteDS Spring 3+ integration server library'
	
	dependencies {
		compile 'javax.inject:javax.inject:1'
		compile 'org.springframework:spring-core:3.1.4.RELEASE'
		compile 'org.springframework:spring-context:3.1.4.RELEASE'
		compile 'org.springframework:spring-beans:3.1.4.RELEASE'
		compile 'org.springframework:spring-tx:3.1.4.RELEASE'
		compile 'org.springframework:spring-orm:3.1.4.RELEASE'
		compile 'org.springframework:spring-web:3.1.4.RELEASE'
		compile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-core:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-acl:3.1.4.RELEASE'
		compile 'org.springframework.data:spring-data-jpa:1.4.1.RELEASE'
		
		compile 'org.hibernate:hibernate-core:4.0.1.Final'
		
		compile project(':granite-server-core')
		
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime project(':granite-server-activemq')
	}

	test {
		includes = [ 'org/granite/test/tide/spring/Test*' ]
	}
}

// Spring 2 integration
project('granite-server-spring2') {
	
	apply plugin: 'java'
	
	description = 'GraniteDS Spring 2 integration server library'
	
	dependencies {
		compile 'org.springframework:spring-orm:3.1.4.RELEASE'								// Use Spring 3 to compile because of generics
		compile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-core:2.0.7.RELEASE'			// 2.0.8 broken in maven central
		compile 'org.springframework.security:spring-security-core-tiger:2.0.7.RELEASE'
		compile 'org.springframework.security:spring-security-acl:2.0.7.RELEASE'
		compile 'org.acegisecurity:acegi-security:1.0.7'
		compile 'org.aspectj:aspectjrt:1.5.4'
		compile 'org.hibernate:hibernate-core:3.6.10.Final'
		
		compile project(':granite-server-core')
	}
	
	sourceSets {
		main {
			java {
				source project(':granite-server-spring').sourceSets.main.java
			}
		}
	}
	
	// For some reaons excludes must be applied on filter after the sourceSets definitions
	sourceSets.main.java.filter.exclude 'org/granite/spring/data/*', 
		'org/granite/spring/security/*',
		'org/granite/tide/spring/data/*',
		'org/granite/tide/spring/security/*',
		'org/granite/tide/spring/Hibernate4*'

	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
}

// Seam 2.1 integration
project('granite-server-seam') {
	
	description = 'GraniteDS Seam 2.1+ integration server library'
	
	dependencies {
		compile files('lib/jboss-seam.jar')
		compile 'javax.faces:jsf-api:1.2_15'
		compile 'javax.ejb:ejb-api:3.0'
		
		compile project(':granite-server-core')
		compile project(':granite-server-hibernate')
		
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'javassist:javassist:3.12.0.GA'
		testRuntime 'javax.el:el-api:1.0'
		testRuntime 'org.hibernate:hibernate-entitymanager:3.3.2.GA'
		testRuntime project(':granite-server-hibernate').files('lib/hibernate-validator.jar')
		testRuntime files('lib/jboss-el.jar')
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	// Ensure tests find seam.properties and other resources
	sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
	sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
}


// Hibernate 3.x support
project('granite-server-hibernate') {
	
	description = 'GraniteDS Hibernate 3.x support library'
	
	dependencies {
		compile 'org.hibernate:hibernate-core:3.6.10.Final'
		compile files('lib/hibernate-validator.jar')			// Not in maven central
		compile project(':granite-server-core')
		
		testCompile('org.hibernate:hibernate-entitymanager:3.6.10.Final')
		testCompile 'org.springframework:spring-orm:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		testCompile 'com.h2database:h2:1.3.173'
		testCompile project(':granite-server-core').sourceSets.test.output
		testCompile(project(':granite-server-spring')) {
			transitive = false
		}
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	}

	// Recompile abstract test classes from Spring module with Hibernate 3
	sourceSets {
		test {
			java {
				source project(':granite-server-spring').sourceSets.test.java
			}
			resources {
				source project(':granite-server-spring').sourceSets.test.resources
			}
		}
	}

	test {
		includes = [ 
			'org/granite/test/hibernate/**/Test*', 
			'org/granite/test/tide/hibernate/**/Test*' 
		]
	}
}

// Hibernate 4+ support
project('granite-server-hibernate4') {
	
	description = 'GraniteDS Hibernate 4.x support library'
	
	dependencies {
		
		compile 'org.hibernate:hibernate-core:4.0.1.Final'
		compile project(':granite-server-core')
		
		testCompile 'org.hibernate:hibernate-entitymanager:4.0.1.Final'
		testCompile 'org.springframework:spring-orm:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		testCompile project(':granite-server-core').sourceSets.test.output
		testCompile(project(':granite-server-spring')) {
			transitive = false
		}
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	}
	
	// Recompile abstract test classes from Spring module with Hibernate 3
	sourceSets {
		test {
			java {
				source project(':granite-server-spring').sourceSets.test.java
			}
			resources {
				source project(':granite-server-spring').sourceSets.test.resources
			}
		}
	}
	
	test {
		includes = [ 'org/granite/test/hibernate4/**/Test*', 'org/granite/test/tide/hibernate4/**/Test*' ]
	}
}

// EclipseLink support
project('granite-server-eclipselink') {
	
	description = 'GraniteDS EclipseLink support library'
	
	dependencies {
		compile 'org.eclipse.persistence:eclipselink:2.5.0'
		
		compile project(':granite-server-core')
		
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'com.h2database:h2:1.3.173'
	}
	
	File eclipselink = configurations.compile.find { it.name.startsWith('eclipselink') }
	
	test {
		jvmArgs = [ '-javaagent:' + eclipselink.path ]
		
		includes = [ 'org/granite/test/eclipselink/**/Test*' ]
	}
}

// TopLink Essentials support
project('granite-server-toplink') {
	
	description = 'GraniteDS TopLink Essentials support library'
	
	dependencies {
		compile files('lib/toplink-essentials.jar')
		
		compile project(':granite-server-core')
	}
}

// DataNucleus support
project('granite-server-datanucleus') {
	
	description = 'GraniteDS DataNucleus support library'
	
	dependencies {
		compile 'org.datanucleus:datanucleus-core:3.2.7'
		compile 'org.datanucleus:datanucleus-api-jpa:3.2.5'
		compile 'org.datanucleus:datanucleus-api-jdo:3.2.4'
		
		compile project(':granite-server-core')
		
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime 'org.datanucleus:datanucleus-rdbms:3.2.6'
	}
	
	// Fore same output folder for test resources and classes otherwise tests don't work
	// sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
	
	File datanucleusCore = configurations.compile.find { it.name.startsWith('datanucleus-core') }
	
	// Enhance test classes for JPA
	task testJPA(type: Test) {
		jvmArgs = [ '-javaagent:' + datanucleusCore.path + '=-api=JPA,org.granite.test.externalizers' ]
		
		includes = [ 'org/granite/test/datanucleus/**/TestDataNucleus*' ]
	}
	
	// Enhance test classes for JDO
	task testJDO(type: Test) {
		jvmArgs = [ '-javaagent:' + datanucleusCore.path + '=-api=JDO,org.granite.test.externalizers' ]
		
		includes = [ 'org/granite/test/datanucleus/**/TestJDODataNucleus*' ]
	}
	
	test {
		it.dependsOn 'testJPA', 'testJDO'
		
		excludes = [ '**' ]
	}
}

// OpenJPA support
project('granite-server-openjpa') {
	
	description = 'GraniteDS OpenJPA support library'
	
	dependencies {
		compile 'org.apache.openjpa:openjpa:2.2.2'
		
		compile project(':granite-server-core')
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	File openjpa = configurations.compile.find { it.name.startsWith('openjpa') }
	
	test {
		jvmArgs = [ '-javaagent:' + openjpa ]
		
		includes = [ 'org/granite/test/openjpa/**/Test*' ]
	}
}

// Bean Validation support
project('granite-server-beanvalidation') {
	
	description = 'GraniteDS Bean Validation support library'

	dependencies {
		compile 'javax.validation:validation-api:1.0.0.GA'
		
		compile project(':granite-server-core')
	}
}


// Flex client library
project('granite-client-flex') {
	
	description = "GraniteDS Flex client library"
	
	type = 'swc'
	srcDirs = [ 'src/main/flex' ]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '3.6', ext: 'zip'
		
		external group: 'org.graniteds', name: 'flex-websocket-client', version: '1.0', ext: 'swc'
	}

	asdoc {
		outputDir 'build/docs/asdoc'
		
		additionalASDocOptions = [
			"-window-title", "GraniteDS Flex API Documentation",
			"-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
		]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
	
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}


// Flex advanced client library (tide, math, validation)
project('granite-client-flex-advanced') {
	
	description = "GraniteDS Advanced Flex client library"
	
	type = 'swc'
	srcDirs = [ 'src/main/flex' ]
	
	additionalCompilerOptions = [
		'-define=CONFIG::debugging,false',
		'-define=CONFIG::flex40,false',
		'-define=CONFIG::flex45,true'
	]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		external project(':granite-client-flex')
		
		external group: 'org.graniteds', name: 'flex-websocket-client', version: '1.0', ext: 'swc'
	}

	asdoc {
		outputDir 'build/docs/asdoc'

        additionalASDocOptions = [
            "-window-title", "GraniteDS Flex API Documentation",
            "-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
        ]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
	
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}

// Flex 4.5+ advanced client library (tide, math, validation)
project('granite-client-flex45-advanced') {
	
	description = "GraniteDS Advanced Flex 4.5+ client library"
	
	type = 'swc'
	// Use the same source dir than Flex 3.5-4.1
	srcDirs = [ project(':granite-client-flex-advanced').file('src/main/flex').path ]
	
	additionalCompilerOptions = [
		'-define=CONFIG::debugging,false',
		'-define=CONFIG::flex40,false',
		'-define=CONFIG::flex45,true'
	]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		external project(':granite-client-flex')
		
		external group: 'org.graniteds', name: 'flex-websocket-client', version: '1.0', ext: 'swc'
	}

	asdoc {
		outputDir 'build/docs/asdoc'

        additionalASDocOptions = [
            "-window-title", "GraniteDS Flex API Documentation",
            "-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
        ]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
		
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}

// Flex UDP client library
project('granite-client-flex-udp') {
	
	description = "GraniteDS Flex UDP client library"
	
	type = 'swc'
	srcDirs = [ 'src/main/flex' ]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		external project(':granite-client-flex')
	}

    // Use afterEvaluate because the flexHome variable is defined after project configuration
	afterEvaluate {
		dependencies {
			external files(flexHome + '/frameworks/libs/air/aircore.swc')
			external files(flexHome + '/frameworks/libs/air/airglobal.swc')
			external files(flexHome + '/frameworks/libs/air/airframework.swc')
		}
	}

	asdoc {
		outputDir 'build/docs/asdoc'

        additionalASDocOptions = [
            "-window-title", "GraniteDS Flex API Documentation",
            "-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
        ]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
	
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}

// Flex 4.5+ tests: must be compiled as main project because gradlefx does not support additional compiler options
// when running flexunit
project('granite-client-flex45-tests') {
	
	description = "GraniteDS Advanced Flex 4.5+ client library"
	
	type = 'swf'
	srcDirs = [ 'src/test/flex' ]
	mainClass = 'TestRunner'
	
	additionalCompilerOptions = [
		'-debug=true',
		'-keep-as3-metadata=Managed,ChangeEvent,NonCommittingChangeEvent,Transient,'
			+ 'Id,Version,Lazy,Name,In,Inject,Out,Produces,ManagedEvent,Observer,PostConstruct,Destroy,'
			+ 'Valid,Size,Test,Ignore,Suite,RunWith'
	]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		internal project(':granite-client-flex')
		merged project(':granite-client-flex45-advanced')
		
		merged files('lib/flexunit-core-flex-4.1.0.swc')
		merged files('lib/flexunit-cilistener-4.1.0.swc')
		merged files('lib/flexunit-uilistener-4.1.0.swc')
		
		test files('lib/flexUnitTasks-4.1.0.jar')
	}

    beforeEvaluate {
        File cmd = new File(flexUnitCommand)
        if (!cmd.exists()) {
            println 'Flash Player location not defined correctly, skip FlexUnit tests'
            tasks.getByName('test').enabled = false
            tasks.getByName('testFlex').enabled = false
        }
    }

	flexUnit {
		excludes = [ '**' ]			// Disable default GradleFX task
		
		toDir = new File(buildDir, 'test-results')
	}
	
	// Use FlexUnit ant task directly, GradleFX built-in test task tries to compile the tests 
	task testFlex << {
		ant.taskdef(resource: 'flexUnitTasks.tasks', classpath: configurations.test.asPath)
		
		File reportDir = file(flexUnit.toDir)
		
		// you can't write to a directory that doesn't exist
		if (!reportDir.exists()) reportDir.mkdirs()
		
		Set<File> libraries = configurations.internal.files +
				configurations.external.files +
				configurations.merged.files +
				configurations.test.files
		
		ant.flexunit (
			swf:			 buildDir.name + '/' + output + '.swf',
			player:          flexUnit.player,
			command:         flexUnitCommand,
			toDir:           flexUnit.toDir,
            workingDir:      buildDir.name,
			haltonfailure:   flexUnit.haltOnFailure,
			verbose:         flexUnit.verbose,
			localTrusted:    flexUnit.localTrusted,
			port:            flexUnit.port,
			buffer:          flexUnit.buffer,
			timeout:         flexUnit.timeout,
			failureproperty: flexUnit.failureProperty,
			headless:        flexUnitHeadless,
			display:         flexUnit.display) {
			
			libraries.each { File libraryFile ->
				println 'Library: ' + libraryFile.path
				library(dir: libraryFile.parent) {
					include(name: libraryFile.name)
				}
			}
		}

		if (ant.properties[flexUnit.failureProperty] == "true") {
			throw new Exception("Tests failed");
		}

	}
	
	test {
		it.dependsOn 'copytestresources', 'testFlex'
	}
}


// Java client library
project('granite-client-java') {
    description = 'GraniteDS Java client'

    dependencies {

		// Dependencies from granite-core
		compile 'javax.servlet:javax.servlet-api:3.0.1'				// Should use 2.5 but 3.0 required by ServletGraniteContext.BasicRequest
		compile 'log4j:log4j:1.2.17'
		
        compile 'org.apache.httpcomponents:httpasyncclient:4.0-beta4',
                'javax.enterprise:cdi-api:1.0-SP4',
                'javax.inject:javax.inject:1',
                'net.sf.extcos:extcos:0.3b',
                'org.eclipse.jetty:jetty-client:8.1.+',
                'org.eclipse.jetty:jetty-websocket:8.1.+',
                'javax.validation:validation-api:1.0.0.GA',
                'org.springframework:spring-beans:3.1.4.RELEASE',
                'org.springframework:spring-context:3.1.4.RELEASE'
    }
	
	List<String> javaExcludes = [ 
		'org/granite/clustering/*Session*.java',
		'org/granite/clustering/TransientReferenceHolder*.java',
		'org/granite/config/Abstract*.java',
		'org/granite/config/Servlet*.java',
		'org/granite/config/ConfigProvider*.java',
		'org/granite/config/*Listener*.java',
		'org/granite/config/flex/Servlet*.java',
		'org/granite/gravity/**',
		'org/granite/tide/IUID*.java',
		'org/granite/tide/TidePersistence*.java',
		'org/granite/tide/TideService*.java',
		'org/granite/tide/TideTransaction*.java',
		'org/granite/tide/annotations/*.java',
		'org/granite/tide/async/*.java',
		'org/granite/tide/data/*.java',
		'org/granite/tide/util/*.java',
		'org/granite/tide/validators/*.java',
		'org/granite/messaging/amf/process/*Processor.java',
		'org/granite/messaging/amf/io/convert/impl/GAE*.java',
		'org/granite/messaging/persistence/*Externalizable*.java',
		'org/granite/messaging/service/security/AbstractSecurityService.java',
		'org/granite/messaging/service/security/GlassFish*.java',
		'org/granite/messaging/service/security/Jetty*.java',
		'org/granite/messaging/service/security/Tomcat*.java',
		'org/granite/messaging/service/security/WebLogic*.java',
		'org/granite/messaging/service/Abstract*.java',
		'org/granite/messaging/service/ServiceFactory*.java',
		'org/granite/messaging/service/ServiceInvoker*.java',
		'org/granite/messaging/service/Simple*.java',
		'org/granite/messaging/service/DefaultServiceExceptionHandler*.java',
		'org/granite/messaging/service/ExtendedServiceExceptionHandler*.java',
		'org/granite/messaging/webapp',
		'org/granite/messaging/webapp/**/*.java',
		'org/granite/util/Entity.java',
		'org/granite/util/Servlet*.java',
		'org/granite/jmx',
		'org/granite/jmx/*.java',
		'org/granite/scan/VFS*.java' 
	]
	
	List<String> resourceExcludes = [
		'org/granite/config/granite-config.xml'
	]
	
	sourceSets {
		main {
			java {
				source project(':granite-server-core').sourceSets.main.java
				
				// Exclude for eclipse
				exclude javaExcludes
			}			
			resources {
				source project(':granite-server-core').sourceSets.main.resources
				
				// Exclude for eclipse
				exclude resourceExcludes
			}
		}
	}
	
	// For some reaons excludes must be applied on filter after the sourceSets definitions 
	sourceSets.main.java.filter.exclude javaExcludes
	
	sourceSets.main.resources.filter.exclude resourceExcludes
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
	
    test {
        exclude 'org/granite/client/test/websocket/**'
    }
}

// Java Advanced client library
project('granite-client-java-advanced') {
	description = 'GraniteDS Advanced Java client'
	
	dependencies {
		compile project(':granite-client-java')
		
		testCompile project(':granite-client-java').sourceSets.test.output
	}
}

// JavaFX client library
project('granite-client-javafx') {
	
	apply plugin: 'cobertura'

	dependencies {
		
		compile 'javax.enterprise:cdi-api:1.0-SP4',
			'javax.inject:javax.inject:1',
			'javax.validation:validation-api:1.0.0.GA',
			'org.springframework:spring-beans:3.1.4.RELEASE',
			'org.springframework:spring-context:3.1.4.RELEASE'
			
		compile files(System.properties.'java.home' + '/lib/jfxrt.jar')
		
		compile project(':granite-client-java')
		
		testCompile project(':granite-client-java').sourceSets.test.output
		
		testCompile 'org.hibernate:hibernate-core:3.6.10.Final',
			'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
			'antlr:antlr:2.7.7'
			
		testCompile project(':granite-server-core'), project(':granite-server-hibernate')
	}
	
	// Include sources of advanced java client
	sourceSets {
		main {
			java {
				source project(':granite-client-java-advanced').sourceSets.main.java
			}
			resources {
				source project(':granite-client-java-advanced').sourceSets.main.resources
			}
		}
	}
}

// Android client library
project('granite-client-android') {

	dependencies {

		compile 'javax.enterprise:cdi-api:1.0-SP4',
			'javax.inject:javax.inject:1',
			'javax.validation:validation-api:1.0.0.GA',
			'org.springframework:spring-beans:3.1.4.RELEASE',
			'org.springframework:spring-context:3.1.4.RELEASE',
			'com.google.android:android:4.0.1.2'

		compile files('lib/android-async-http-1.4.3.jar')
		
		compile project(':granite-client-java')

		testCompile project(':granite-client-java').sourceSets.test.output
		
		testCompile 'org.hibernate:hibernate-core:3.6.10.Final',
			'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
			'antlr:antlr:2.7.7'
			
		testCompile project(':granite-server-core'), project(':granite-server-hibernate')
	}
	
	// Include sources of advanced java client
	sourceSets {
		main {
			java {
				source project(':granite-client-java-advanced').sourceSets.main.java
			}
			resources {
				source project(':granite-client-java-advanced').sourceSets.main.resources
			}
		}
	}
}


// Reference docs
project('reference-docs') {
	
	apply plugin: 'asciidoctor'
	
	task docFlex(type: org.asciidoctor.gradle.AsciidoctorTask) {
		outputDir = new File("$buildDir/docs/flex")
		options = [
			doctype: 'book',
			attributes: [
				flex: '',
				copycss: '',
				'source-highlighter': 'highlightjs',
				idprefix: '',
				idseparator: '-'
			]
		]
	}
	
	task docJava(type: org.asciidoctor.gradle.AsciidoctorTask) {
		outputDir = new File("$buildDir/docs/java")
		options = [
			doctype: 'book',
			attributes: [
				java: '',
				copycss: '',
				'source-highlighter': 'highlightjs',
				idprefix: '',
				idseparator: '-'
			]
		]
	}
	
	task asciidoctor(overwrite: true, dependsOn: [ 'docFlex', 'docJava' ]) {		
	}
}
