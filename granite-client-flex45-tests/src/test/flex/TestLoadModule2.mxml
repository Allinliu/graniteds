<?xml version="1.0"?>
<!--

      GRANITE DATA SERVICES
      Copyright (C) 2006-2014 GRANITE DATA SERVICES S.A.S.

      This file is part of the Granite Data Services Platform.

      Granite Data Services is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.

      Granite Data Services is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
      General Public License for more details.

      You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
      USA, or see <http://www.gnu.org/licenses/>.

-->
<s:Application
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="library://ns.adobe.com/flex/mx"
	initialize="init()"
	implements="org.granite.test.IModuleHolder">

    <fx:Script><![CDATA[
		import flash.net.registerClassAlias;
		
		import mx.core.IVisualElement;
		import mx.events.ModuleEvent;
		import mx.modules.IModuleInfo;
		import mx.modules.ModuleManager;
		
		import org.granite.test.tide.MachinService;
		import org.granite.test.tide.TrucService;
		import org.granite.tide.Tide;
		import org.granite.tide.spring.Spring;
		
		
		public function testModule():void {			
		}

		
		private function loadModule(modulePath:String):void {
			moduleLoader.url = modulePath;
		}
		
		private function unloadModule():void {
			moduleLoader.unloadModule();
			moduleLoader.url = null;
		}
		
//        private function loadModule(modulePath:String):void {
//            var moduleInfo:IModuleInfo = ModuleManager.getModule(modulePath);
//            if (moduleInfo.ready) {
//                var loadedModule:Object = null;
//                if (loadedModulesCache != null) {
//                    loadedModule = loadedModulesCache[modulePath];
//                    if (loadedModule == null) {
//                        loadedModule = moduleInfo.factory.create();
//                        loadedModulesCache[modulePath] = loadedModule;
//                    }
//                }
//                else
//                    loadedModule = moduleInfo.factory.create();
//
//				moduleLoader.removeAllElements();
//				moduleLoader.addElement(loadedModule as IVisualElement);
//            }
//            else {
//                var moduleDomain:ApplicationDomain = new ApplicationDomain(ApplicationDomain.currentDomain);
//                loadingModules[modulePath] = { info: moduleInfo, domain: moduleDomain };
//                moduleInfo.addEventListener(ModuleEvent.READY, moduleReadyHandler);
//                moduleInfo.load(moduleDomain, null, null, moduleFactory);
//            }
//        }
//
//        private function moduleReadyHandler(event:ModuleEvent):void {
//            var loadedModule:Object = event.module.factory.create();
//            var moduleDomain:ApplicationDomain = ApplicationDomain(loadingModules[event.module.url].domain);
//            Tide.getInstance().addModule(loadedModule, moduleDomain);
//            delete loadingModules[event.module.url];
//
//            if (loadedModulesCache != null)
//                loadedModulesCache[event.module.url] = loadedModule;
//
//			moduleLoader.removeAllElements();
//			moduleLoader.addElement(loadedModule as IVisualElement);
//        }
//
//        private function unloadModule(modulePath:String):void {
//			moduleLoader.removeAllElements();
//
//            var moduleInfo:IModuleInfo = ModuleManager.getModule(modulePath);
//            if (!moduleInfo.loaded)
//                return;
//
//            if (loadedModulesCache != null) {
//                var loadedModule:Object = loadedModulesCache[modulePath];
//
//                delete loadedModulesCache[modulePath];
//            }
//
//            moduleInfo.addEventListener(ModuleEvent.UNLOAD, moduleUnloadHandler);
//            moduleInfo.unload();
//        }
//
//        private function moduleUnloadHandler(event:ModuleEvent):void {
//        }*
		
			private function init():void {
				// registerClassAlias("org.granite.test.tide.TrucService", TrucService);
				// registerClassAlias("org.granite.test.tide.MachinService", MachinService);
			}

        ]]></fx:Script>

    <s:VGroup>
        <s:Button label="Load module 1" click="loadModule('TestModule.swf')"/>

        <s:Button label="Load module 2" click="loadModule('TestModule2.swf')"/>
		
		<s:Button label="Unload module" click="unloadModule()"/>

        <mx:ModuleLoader id="moduleLoader"/>

    </s:VGroup>
</s:Application>
