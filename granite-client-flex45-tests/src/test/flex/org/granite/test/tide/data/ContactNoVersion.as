/*
 *   GRANITE DATA SERVICES
 *   Copyright (C) 2006-2015 GRANITE DATA SERVICES S.A.S.
 *
 *   This file is part of the Granite Data Services Platform.
 *
 *   Granite Data Services is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   Granite Data Services is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
 *   General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
 *   USA, or see <http://www.gnu.org/licenses/>.
 */
/**
 * Generated by Gas3 v1.1.0 (Granite Data Services) on Sat Jul 26 17:58:20 CEST 2008.
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (Contact.as).
 */

package org.granite.test.tide.data {
	
	import org.granite.test.tide.*;

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import org.granite.meta;
    import org.granite.tide.IPropertyHolder;
    import org.granite.tide.IEntityManager;

	use namespace meta;

	[Managed]
    [RemoteClass(alias="org.granite.test.tide.data.ContactNoVersion")]
    public class ContactNoVersion extends AbstractEntityNoVersion {

        private var _email:String;
        private var _person:PersonNoVersion;

        public function set email(value:String):void {
            _email = value;
        }
        public function get email():String {
            return _email;
        }

        public function set person(value:PersonNoVersion):void {
            _person = value;
        }
        [Lazy]
        public function get person():PersonNoVersion {
            return _person;
        }

       	override meta function merge(em:IEntityManager, obj:*):void {
            var src:ContactNoVersion = ContactNoVersion(obj);
            super.meta::merge(em, obj);
            if (meta::isInitialized()) {
               	em.meta_mergeExternal(src._email, _email, null, this, 'email', function setter(o:*):void{_email = o as String});
                em.meta_mergeExternal(src._person, _person, null, this, 'person', function setter(o:*):void{_person = o as PersonNoVersion});
            }
        }

        override public function readExternal(input:IDataInput):void {
            super.readExternal(input);
            if (meta::isInitialized()) {
                _email = input.readObject() as String;
                _person = input.readObject() as PersonNoVersion;
            }
        }

        override public function writeExternal(output:IDataOutput):void {
            super.writeExternal(output);
            if (meta::isInitialized()) {
                output.writeObject((_email is IPropertyHolder) ? IPropertyHolder(_email).object : _email);
                output.writeObject((_person is IPropertyHolder) ? IPropertyHolder(_person).object : _person);
            }
        }
    }
}
